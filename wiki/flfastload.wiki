#summary fl is fast load
#labels v5.5

<wiki:toc max_depth="9" />

= Introduction =

fl (fastload) allow source code text to be pasted into the terminal window.  Fastload  bufferes the text in an available cog (usually cog5).  This allows the interpreter to run at its best speed, and eliminated the issue of buffer over runs without the over head of flow control.  

This page replaces the the old page from 3.2  which has been deprecated. 

http://code.google.com/p/propforth/wiki/flfastloadword 

== Using fl ==

Look in the Extesnsions directory for examples.

Put `fl` at the begining of a file of forth source code

Highlight the entire file, and paste into the teraterm window. 

fl buffers the datastream to the next available cog (usually cog5)

The buffer cog interprets the data stream.

== What it does ==

When the interpreter encounters a semicolon, propforth writes the new forth definition to the dictionary.  This takes a bit of time, this would eventually cause a buffer overrun were this to happen in the serial cog (cog6).  fl allows the interpreter to run at it own best speed.  When finshed, control returns to cog 6. 


= "fl" and "allot" = 

From caskz' post
http://forums.parallax.com/showthread.php/146693-Propforth-v5.5-is-available-for-download?p=1191034&viewfull=1#post1191034

Maybe known problem, but someone might not know. There is mistake I often have.

Copy/paste to TeraTerm code below;

{{{
fl

wvariable buffer d830 allot
}}}

Error happen.

{{{
Prop0 Cog6 ok
CON:Prop0 Cog5 RESET - last status:94 UNKNOWN ERROR
}}}

Word"fl" use free-area to compile source. So buffer reserve 832bytes and "fl" can't operate. [It's cog5, not cog6]

To prevent this, you write codes between "fl" and "wvariable buffer d830 allot"
Reserve-bytes depend on codes-amount. 

Sal's response in issue 196:

"fl allocates all free memory except 128 bytes, and buffers the incoming code in that memory. The memory is "freed" as the characters are interpreted. So if you use fl, memory will be limited to the number of characters interpreted so far +128 - dictionary use. Usually this is ok, but in cases as above it becomes a problem."


== Working with "allot"  ==

The fl word uses RAM starting at 128 bytes past the end of the dictionary.  This means if something is defined greater than about 100 bytes (due to overhead, etc) the dictionary will overwrite the RAM that fl is using as its buffer. This will likely cause a failure or error.  

There are two suggestions from Sal how to work with this:

1. lockdict and freedict

lockdict locks the dictionary, so another task does not write to it while this one does.

freedict sets the dictionary as free again 

{{{
lockdict wvariable myarray 10 allot freedict
}}}

The lockdict and freedict keep the code contiguous.  (I have not tried this, place provide feedback with your results)

2. don't allocate at the beginning, at the end use a word to allocate the buffers.

 * So, paste in so code using fl, let it finish.
 * paste in another file, that just contains the allot for the buffers
 * paste in another file with the remainder of you code, if any

Since the issue is with trying to allocte within the fl word, consider arranging the code so the ALLOT is performed in a separate step, and the rest of the code is loaded with the fl word as a separate step. 

=  Dave Hein Explanation = 

From Forum Post http://forums.parallax.com/showthread.php/146693-Propforth-v5.5-is-available-for-download?p=1191763&viewfull=1#post1191763

prof_braino, the description for fl should explicitly state that the data that is buffered in hub RAM in the unused area after the dictionary. It currently says that it is buffered in a cog, which would imply that it's buffered in the cog's RAM. Also, the description should state that the amount of data pasted in the serial terminal should be less than the unused space - 128 bytes. Does PropForth support the unused word? If so, the user can be instructed to type "unused" to see how much space is available for buffering.

It would also be good to document the fact that the fastload mode is exited when there is a gap of N msecs in the serial data. I don't know what the value of N is, but it's basically the amount of time it takes for PropForth to call key? and decrement a timeout count 8192 times in a begin loop. I guessing the timeout time is on the order of 10 to 100 msecs.

= END of fl word instructions 20130621 =