#summary Using a custom Serial connection
#labels v5.0,Serial

= Introduction =

From forum post 

http://forums.parallax.com/showthread.php?138399-Propforth-5.0-is-available-for-download&p=1083307&viewfull=1#post1083307

This draft will go into PROPFORTH.html when complete

= About SERIAL = 

SERIAL is necessarily built into the kernel, but we tend to use it all over the place in various (modified) forms. To allow the default SERIAL to be present in the kernel , and to allow modification to the kernel default at the same time, SERIAL is a loadable module.

There are two parts the the serial function: {{{_serial }}} and {{{serial}}}.  
The "internal" part is in the definition {{{_serial}}} (with an underscore). This does that internal kernel operation for serial communications. Generally, we don't want to call {{{_serial }}} or any of its subfunctions directly.
The "external" part is in the definition {{{serial  }}} (with no underscore). This is the function the user or application calls to interface to the function.
The external word {{{serial  }}} is the "interface", this is the word "packages up" the function and is how to get at {{{_serial }}} .

= INTERNAL {{{_serial }}}  =

The high level source code for {{{_serial  }}} is in
{{{
..\kernels\BootKernel\BootOptimizeKernel\
PropForthBootOptimzeAsmSrc.f
 }}} 


Rename file {{{PropForthBootOptimzeAsmSrc.f and modify it as necessary for your particular needs.

This is actually assembler code (and was based on forth definitions in previous versions). This serial code has been optimized to the extent that it is no longer useful to go back to a high forth version for this function.

{{{ serial  }}} assembler code starts at line 775 actually at label:
{{{
build_BootOpt :rasm
}}}

{{{ serial  }}} assembler code ends at line 1104
{{{
;asm _serial
}}}

= EXTERNAL serial =

The high level source code for {{{ serial  }}}  is in
{{{
..\kernels\BootKernel
PropForthStartKernel.f
 }}} 

The are some {{{ serial  }}}  related constants at lines 54 through 60
The high level forth definition for {{{ serial }}} is at line 2459

what {{{serial}}} does:
1) changes baud to number of cock cycles
2) takes the string to be displayed in {{{cog?}}} and sets it up
3) takes cog and marks it as no longer available {{{(4 state nc!)}}}
4) sets flags (HC08 is 1 done expand CRFL)
5) set break length to 0
6) starts {{{_serail}}}

= INTERFACE to {{{_serial }}}  VIA {{{serial  }}}  =

Please notice the the difference between {{{_serial  }}} and {{{serial  }}} is
 * {{{_serial  }}} takes number of clocks per bit
 * {{{serial  }}} takes baud rate

see {{{ ..\kernels\doc\tutorials
tutorial-3.2 Serial Loopback.txt }}}

For instructions how to start a serial connection

= DOCUMENTATION EXPERIMENT =

We are hoping that the user community will contribute to the documentation. The idea is that as each user question is resolved, the user that receives the answer helps us "write it up" such that other folks can understand it, and this gets added to the PROFORTH.html document.

@Markus - Please give this a look, and see if this gets you any further along. Please ask more questions, we will work with you till you feel you understand the functions sufficiently to do what you want.

If Markus (and the rest of us) can help us write up the documentation for this function to ensure that it is sufficiently clear and complete, Sal will add to PROPFORTH.html. We want to give this "user question driven" documentation model a try, to off-load Sal and limit effort to questions that are have been asked. (Trying to anticipate every possible question didn't work out previously). 