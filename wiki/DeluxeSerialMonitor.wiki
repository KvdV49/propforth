#summary One-sentence summary of this page.
#labels Featured

=== SerialMonitorDocumentation ===

= SerialMonitorExpanation =

The Deluxe Serial Monitor is an enhanced version of the default serial driver.

By default, Spin starts the default serial driver on cog7 and starts propforth on cog6. (Spin these no longer does anything in terms of propforth at this point).  The serial monitor on cog7 handles communication over the prop's serial port, taking character from the serial port and putting them into the forth cogs input buffer.  The forth cog interprets the character. The forthcog puts output into its output buffer.  Cog7 serial driver takes these characters and sends them out the serial port.  To the user, it appears that we are talking directly to the forthcog (cog6 by default) and we are, but it is being managed by the serial driver running on cog 7. 

The Delux Serial Monitor adds a bit of functionality to the default.  The Assembler Time Slicer runs between the forth words executing on cog7 (and not words executing on cogs 0-6 by default). This slows down the forth execution on cog7, but the cog is fast enough that this does not effect serial communications at 57.6k baud (tested). The assembler time slicer therefore is running VERY often.  This allows the cog7 task to monitor certain aspects of the other running forth cogs.  

The Serial Monitor checks the running forth cogs for underflow and overflow conditions. If the stack points points outside the valid range of stack values (stack locations 0-31 are valid) the serail monitor issues an underflow or overfolw message and restarts the cog, and starts up another cog. (Starting another cog at under/over-flow detection is an artifact from development and may be changed if we get reason to do so). Also, the Serial Monitor checks the input stream from the user coming in over the serial put and looks for CTL+A, CTL+B, and CTL+C.

*CTL+A* send the serial monitor to direct serial communications to the NEXT forth cog.

*CTL+B* send the serial monitor to direct serial communications to the PREVIOUS forth cog.

*CTL+C* send the serial monitor to reset the propeller chip.


= SerialMonitorInstructions =

These are instructs to load and run the Delux Serial Monitor in PropForth

0) Preconditions - load PropForth on the Propeller  

1) load AssemblerTimeSlicing.f 

   Paste the contents of AssemblerTimeSlicing.f into teraterm

_FL_

   The FL command will be diplayed and the RED led on the DemoBoard will flash indicating text character recieve  is in progress.

   The The BLUE LED will begin flashing indicating charater transmit is in progress and teraterminal dispaly will begin displaying the forth source text definitions from AssemblerTimeSlicing.f.  After the last definition, propforth will dispay 

_Cog6 ok_

   after success

2) load SerialDriver.f to the Propeller

   Paste the contents of SerialDriver.f into teraterm

_FL_

   The FL command will be diplayed and the RED led on the DemoBoard will flash indicating text character recieve  is in progress.

   The The BLUE LED will begin flashing indicating charater transmit is in progress and teraterminal dispaly will begin displaying the forth source text definitions from SerialDriver.f.  After the last definition, propforth will dispay 

_Cog6 ok_

   after success


3) load SerialMonitor.f on to the Propeller 


   Paste the contents of SerialMonitor.f into teraterm

_FL_

   The FL command will be diplayed and the RED led on the DemoBoard will flash indicating text character recieve  is in progress.

   The The BLUE LED will begin flashing indicating charater transmit is in progress and teraterminal dispaly will begin displaying the forth source text definitions from SerialDriver.f.  After the last definition, propforth will dispay 

_Cog6 ok_

  after success

 
4) saveforth

   Execute the word saveforth

*saveforth*

   A series of dots (periods)  will be displayed indicating each 32byte page of eeprom that is written.  There are a maximum of 1024 pages, but only the pages that are used are written.

5) reboot

   execute the word reboot

*reboot*

   The prop version string is displayed with the final integer incremented.   The propforth now has the DeluxSerialMonitor running, and will respond to CTL+A, CTL+B and CTL+C.

   The propforth will also display a message in the event of stack under/over-flow on the running forth cogs. 

6) Verify Assembler Time Slicer is running

   Type in "aslice?"   [rename aslice? to LongestTimeSlice? ]

*LongestTimeSlice*

   returns 260

_260_

   Meaning: The longest timeslice is 260 HEX clocks.  This is critical to assembler timing.  This time indicates we can do 57.6k Baud

< Doing the math is left as an exercise to the experimenter >

 
= SerialMonitorTechnicalNotes =

T1)  Top Stack Item

   NOTE:  Access to the top stack item is buffered (the top stack item is done in registers). Words that access ONLY the top stack item are NOT detected for stack over/under-flow.

   Example1:  underflow detected

   Start: stack is empty 

*st?*

_ST:_

*.* <return>  

   dot to print top of stack value when stack is empty

_UNDERFLOW_

_cog5-6_

   Eample2: underflow not detected

   stack empty 

*st?*

_ST:_

*1-*

_cog6 ok_

   Explanation: dot prints the current value, then does a drop; the drop causes the underflow to detect

   1- decrements the top of stack, it not detected

T2) Auto-Reconnect default - Cog6 automatically reconnects to the serial driver upon reset, the other cogs do not (by default)
 
   NOTICE: Only cog 6 automatically restarts after over/underflow reset

   Example: Cog 6 auto reconnect

*CTL+A*

_Cog 6_

*.*

_UNDERFLOW_

_cog 5 ok_

   Example:  

*CTL+A*

_Cog 5_

*.*

_UNDERFLOW_

    <no response to key presses; cog 5 appears dead >

    CTL+A a few times

_>6_

_>5_

   Explanation:  Cog7 is still running and handling the serial communication as evidenced by the  responses.  The CTL^A functions to cycle through the running forth cogs.  When cog7 initiates the connection to each cog, it begins responding. When we get back to cog5 it "connects"  

Summary: Only cog 6 auto - reconnects, cogs 0 to 5 do not auto reconnect


T3) Auto-Reconnect Exercise:  Change the default so all cogs auto-reconnect to the serial driver on restart.

   To define an auto reconnect word:   redefine the boot word for the cog 

   Example: redefine boot5 to auto connect on start 

*: boot5 cogid >cog ;*  \  cogid is the number of the running cog

   >cog starts the cog communication with the cog7 serial driver

T4) Resources used by propforth in the Hub and in Each COG

   To determine the amount of resources consumed by propforth in the hub and in each cog, execute the word free.

*free*

_39e4 bytes free a1 cog longs free_

   This means of the 7fff byte in the HUB, 39e4 are free.   Cog has 384 longs, 161 are free.

   Therefore about 50% of Hub is used by forth, and about 50% of the cog resoures are used by forth.  In light of this, the desision was made NOT to include any extra words in the default propforth image, as dictions space is a limiting factor.