#summary Extensions to the PropForth Kernel
#labels v4.5,v5.0

= Introduction =

These are the !PropForth Extensions.  A section is to be added explaining  each extension listed.  Typically a given application will not need all extensions.  The user/developer chooses the extensions suitable for the application, and only those need to be added.  This saves on memory footprint, and program complexity.  This is roughly analogous to other environments where only the necessary functions are selected at compile time to be compiled into the application; the difference is that in FORTH the user plays a greater role in selecting the functions and at what point a given extension is added. 

 * [PropForthExtensions#Kernel_Extensions Kernel Extensions]
   * [PropForthExtensions#Boot_Kernel Boot Kernel]
   * [PropForthExtensions#Development_Kernel Development Kernel]
 * [PropForthExtensions#EEPROM_Extensions EEPROM Extensions]
    * [PropForthExtensions#EEPROM_READ-WRITE_File_system EEPROM READ-WRITE File system]
    * [PropForthExtensions#EERPOM_READ-Only_File_System EERPOM READ-Only File System]
    * [PropForthExtensions#Temporary_Write_Capability_for_Read_Only_File_System Temporary Write Capability for Read Only File System]
 * [PropForthExtensions#Software_Logic_Analyzer_Extension Software Logic Analyzer Extension]
 * [PropForthExtensions#Prop_Assembler_Extension Prop Assembler Extension]
 * [PropForthExtensions#servo_extension servo extension]
 * [PropForthExtensions#Auxiliary_Serial_Terminal_Extension Auxiliary Serial Terminal Extension]
 * [PropForthExtensions#buffered_I/O_extension buffered I/O extension]
 * [PropForthExtensions#case_statement_extensions case statement extensions]
 * [PropForthExtensions#Fast-Hartley_Transform_(FHT)_extension Fast-Hartley Transform (FHT) extension]
 * [PropForthExtensions#OnBoot_Extension_(Change_Boot-Time behavior) OnBoot Extension (Change Boot-Time behavior)]
 * [PropForthExtensions#Optimizer_Extension Optimizer Extension]
 * [PropForthExtensions#Peep-hole_Assembler_Extension Peep-hole Assembler Extension]
 * [PropForthExtensions#Disassembler_Extension Disassembler Extension]
 * [PropForthExtensions#Secure_Digital_Card_(SD)_Extensions Secure Digital Card (SD) Extensions]
 * [PropForthExtensions#Spinneret_Extensions Spinneret Extensions]
   * [PropForthExtensions#IP_Extension IP Extension]
   * [PropForthExtensions#Telnet_Server_Extension Telnet Server Extension]
   * [PropForthExtensions#NTP_Client_Extensions NTP Client Extensions]
   * [PropForthExtensions#HTTP_Server_Extension HTTP Server Extension]
 * [PropForthExtensions#Real_Time_Clock_(RTC)_Extensions Real Time Clock (RTC) Extensions]
 * [PropForthExtensions#ROM-Less_Extension ROM-Less Extension]
 * [PropForthExtensions#MultiChannel_High_Speed_Synchronous_Serial_Channel_(MCS)_Extension MultiChannel High Speed Synchronous Serial Channel (MCS) Extension]
 * [PropForthExtensions#MultiProp_Extension MultiProp Extension]

* These extensions exist but have not been brought forward to the current release *
 
 * [PropForthExtensions#VGA_Extensions VGA Extensions]
 * [PropForthExtensions#aarez aarez]

* These extensions exist but have not been added to the download archive (note please add more hours to the day) *

 * [PropForthExtensions#Multi-Line Character_LCD_Panel_Extension Multi-Line Character LCD Panel Extension] (caskaz)
 * [PropForthExtensions#Floating_Point_Coprocessor_(FPU)_Extension Floating Point Coprocessor (FPU) Extension] (nglordi)
 * [PropForthExtensions#Analog_Computer_Simulator Analog Computer Simulator] (nglordi)

* The extensions are on the list but have not seen any code presented to the public.  As you can see, most extensions beyond the kernel are only plans at this point (20110710).  When the kernel is complete, adding support for a given hardware should be a simple matter of reading the datasheet and writing the driver. *

 * [PropForthExtensions#Electronic_Speed_Controller_(ESC)_Extension Electronic Speed Controller (ESC) Extension]
 * [PropForthExtensions#Stepper_Motor_Extension Stepper Motor Extension]
 * [PropForthExtensions#RCTime_Extension RCTime Extension]
 * [PropForthExtensions#GPS_Extension GPS Extension]
 * [PropForthExtensions#Accelerometer_Extension Accelerometer Extension]
 * [PropForthExtensions#Gas_Sensor_Extension Gas Sensor Extension]
 * [PropForthExtensions#Gyro_Extension Gyro Extension]
 * [PropForthExtensions#Pressure_Sensor_Extension Pressure Sensor Extension]
 * [PropForthExtensions#PING))_Extension PING)) Extension]
 * [PropForthExtensions#Xband_Motion_Extension Xband Motion Extension]
 * [PropForthExtensions#Load_Sensor_Extension Load Sensor Extension]
 * [PropForthExtensions#A/D_Extensions A/D Extensions]
 * [PropForthExtensions#D/A_extension D/A extension]

----

* The documentation is to include a section for each heading above.  New Sections will be added as they are completed and/or available. *

= Kernel Extensions =

  == Boot Kernel ==

  The Boot Kernel is the bare Forth Kernel.  Sometimes the bare kernel is defined as the smallest unit of Forth that can read an write memory.  In PropForth, the bare kernel is defined as the smallest unit that is able to re-generate the Propforth.spin file. 

 The Boot Kernel is generally used AFTER development is complete (all the applications code is finalized).  This is typically in stand alone turnkey applications that do NOT need the interactive forth command prompt included in the final aaplication. 
  
  == Development Kernel ==

  The development kernel is an interactive command line interface to the propforth kernel.  It contains developmer extensions that are most commonly used in experiments and application development.  For example, the following words (forth routines) are included by default to aid in development:

  * words - display all the words (forth routines) currently in the forth dictionary
  * st? - displays the contents of the stack, 32bit longs in hex
  * decimal - converts the cogs number base to decimal
  * (add more examples here) 

  Also, sparse and verbose diagnostic messages are included for common functions.   Examples are:

  * cogs reset messages   
  * stack underflow messages
  * stack overflow messages
  * divide by zero messages

  Many internal functions do NOT include error code displays by default, handling these are the responsibility of the developer.
 
  * Memory range violations
  
  Best practice is to write extensions such that they operate in the development kernel, but do not require development kernel functions.  This way, extension can be used with the BOOT KERNEL in turnkey final applications (that do not include the forth development environment). 

  Extensions that are for development should be identified as * development extensions * and dependencies noted.  The reason is that is development and final extensions are mixed during development, there is a risk that something will break when the app is finalized. Generally, there is little time for these error at the end of the project, it is best to address this earlier when their is sufficient time to understand and correct problems. 

=  EEPROM Extensions =

The EEPROM is one of the few pieces of external hardware required by a forth system.  The default kernels provide support for reading and writing EEPROM as individual bytes, and as pages (see datasheet).  

Currently the Demo Board comes stock with a 32k EEPROM, which is entirely used to hold the prop boot image.  This minimum 32KEEPROM cannot be used to store additional data on a prop application that is to be rebooted (writing to EEPROM will step on the boot image and that causes problems).  The prop protoboard and most other include stock or upgradeable 64k EEPROM.  The additional storage can be used to store additional data beyond the boot image.  Propforth includes extensions to tuse the additional EEPROM as a rundimentary "file storage system". 


    == EEPROM READ-WRITE File system ==

  The Read-Write File system allows the developer to put files into EEPROM memory and access them.      The EEPROM file system allow read, write, delete of text files and data.

    ==  EEPROM READ-Only File System ==

  After the EEPROM memory is loaded, often it is desirable to "protect" the files in EEPROM memory. Loading the lower 32k with a kernel and READ-ONLY EEPROM file system gives a degree of confidence that the EEPROM image will not be affected by inadvertent file operations.  HOWEVER, since the default kernel does have support to modify individual byte/pages of EEPROM, the possibility remains (which usually means you have a bug in your code). 

    == Temporary Write Capability for Read Only File System ==

  During development, it is often necessary to modify the contents of the READ ONLY files system until it becomes stable.  In this case, usually the READ-Only files extensions are added to the kernel, and the kernel image is saved to prop lower 32k (saveforth).  The temporary write extensional are added to the dictionary, the files are written, and the prop is rebooted.  This allow changes to the READ Only file system contents in a more controlled manner.  

= Software Logic Analyzer Extension =

The software Logic Analyzer (LAC) is is a tool for sampling and displaying the state of the Propeller chips 32 I/O pins.  

The sample rate is controlled by setting the LAC props sample frequency. 

There are three main LAC configurations:

 * Sample at every 1 clock (Prop frequency, full speed) to COG memory 
 * Sample every 4 clocks maximum to ...
 * sample every ... clocks to HUB memory 

Sampling to cog memory is faster, but only allows 2K max of data sampling

Sampling to Hub memory is slower, but allows a maximum of 32K of samples.

Sampling may trigger on rising edge, falling edge, or middle of transition.

LAC may be configured for sampling to trigger based on a pin state.

LAC may be configured for sampling to trigger based on a complex set of pin states. 

= Prop Assembler Extension =

The prop assembler is used to examine the assembler level code generated by the forth compile for forth routine.  The assembler routine can be extracted and optimized, and the optimized code loaded directly into cog memory as a sequence of bytes (grouped in longs) for fast execution.  

The method for doing this is changing from version 4.x to v5.x.

Full details will be supplied in version 5.0 when released.

= servo extension =

The servo extensions use to cog internal counters (ctra, ctrb) to generate servo control pulses.  Recall that hobby servos use a control pulse every 20 milliseconds of 0.5 to 2.5 milli seconds, with 1.5 ms pulse representing "center".  Using 2.5 ms pulse as maximum, a single ctr can control 8 servos.  One cog can control 18 servo (8 each on counters A and B), so two cogs could control 32 servos.  However, 32 servos would consume all 32 IO pins, so additional hardware would be needed.  Since this is a simple driver, support is left as 32 servos on 2 cogs, and the user can modify this as the application hardware requires. 

Cheap hobby servos have been found to operate less than 180 degrees of swing, and generally cannot go all the way to 0.5 ms and 2.5 ms positions.  By default, the limits have been set back a bit.  At least one user "hit the stops" during the calibration routine (one time too many with too much voltage) and broke through the stops. (Thus modifying the servo into a continuous rotation servo by accident).

Caution: Users are encourages to change the limits and defaults when calibrating servos, be aware you can command it to do thing is might not like.  You have been warned. (Queue mad scientist laugh: Muhoohahahaha!)

= Auxiliary Serial Terminal Extension =

Any I/O pin can be configured as an asynchronous serial port.  See the snet.f extension.  The user is responsible for level shifting (MAX232 etc) if needed.  A 3.3 volt micro I/O pin can be connected to another 3.3 volt micro I/O pin via a 220 ohm resistor as shown in the examples.  The 220 ohm resistor is not needed in most cases but is included in case a software error causes one micro to drive it's end high when the other micro is driving it's end low. 

= buffered I/O extension =

----


= case statement extensions =

The case extension demo compares the use of case 
{{{ case ... of ... endof }}}

versus 

{{{ over ... if ... else  }}}

---- 

= Fast-Hartley Transform (FHT) extension =
= !OnBoot Extension (Change Boot-Time behavior) =
= Optimizer Extension =
= Peep-hole Assembler Extension =
= Disassembler Extension =
= Secure Digital Card (SD) Extensions =
=  Spinneret Extensions =
  ==  IP Extension ==
  == Telnet Server Extension ==
  == NTP Client Extensions ==
  == HTTP Server Extension ==
  == Real Time Clock (RTC) Extensions ==
= ROM-Less Extension =
= !MultiChannel High Speed Synchronous Serial Channel (MCS) Extension =
= !MultiProp Extension =

These extensions exist but have not been brought forward to the current release
 
= VGA Extensions =
= aarez=

These extensions exist but have not been added to the download archive (note please add more hours to the day)

= !Multi-Line Character LCD Panel Extension = (caskaz)
= Floating Point Coprocessor (FPU) Extension] = (nglordi)
= Analog Computer Simulator = (nglordi)

The extensions are on the list but have not seen any code presented to the public.  As you can see, most extensions beyond the kernel are only plans at this point (20110710).  When the kernel is complete, adding support for a given hardware should be a simple matter of reading the datasheet and writing the driver.  User are encouraged to contribute to these when developed to their projects.  Contributed code will be added to the download archive. 

= Electronic Speed Controller (ESC) Extension =
= Stepper Motor Extension =
= !RCTime Extension =
= GPS Extension =
= Accelerometer Extension =
= Gas Sensor Extension =
= Gyro Extension= 
= Pressure Sensor Extension =
= PING)) Extension =
= !Xband Motion Extension =
= Load Sensor Extension =
= A/D Extensions =
= D/A extension =


----
Add your content here.


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages