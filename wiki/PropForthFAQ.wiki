#summary Frequently Asked Questions
#labels Featured,v3.2

= How Do I Submit a Question? =

  * Sign in to your gmail account enter comments at the bottom of the page in question

= Is there a simple Archive that contains all of the PropForth documentation? =

Yes and no.  This website that you are viewing is the archive of propforth documentation.

http://code.google.com/p/propforth/wiki/PropForth

This question was asked with the intent of requesting a single download of a zip-file archive of all these pages.  However, there does not yet exist a full, complete set of documentation, because of resource limitations.  The documentation is being added as specific requests come in, and as time allows.  That's the best we can do at the moment. 

= How do I navigate the documentation on this site? =

Start with 

http://code.google.com/p/propforth/wiki/PropForth

and follow the links in the order presented.  If the information does not address your question, please leave a comment or post your question on the forum.  Also look through the wiki list

http://code.google.com/p/propforth/w/list

and start with the files tagged for the current version.

Please send suggestions as to ways to better organize the material, and we will do what we can. 

= What files do I want? =

 * The archive [http://code.google.com/p/propforth/downloads/detail?name=PropForth3.2%2020100710%20archive.zip PropForth3.2 20100710 archive.zip] contains the current source code file set. This is the one that most folks will want to see.

 * The earlier versions might not agree with the current documentation, so avoid these unless something is broken. 

= In what version will PropForth use standard forth names for standard forth words?  When will this version come out? =

Standard-ish forth names are used for all implemented standard forth functions beginning in version 3.2.  If you feel a particular name is still counter-intuitive or misleading please send a comment here or on the [http://forums.parallax.com/forums/default.aspx?f=25&m=468264 Parallax Propeller forum thread ]

We are sure there are several (one stops seeing when one looks at it too long) so please bring them to our attention. 

= Do I need the files spinmakerPart1 and 2 to create kernel source code? =

  * Yes.  spinmakerPart1.f and spinmakerPart2.f generate Propforth kernel definitions from the _currently running forth image_.  After running saveforth, the spinmaker word will create the source definitions for that image, which will include any definitions you added. 

These are included in the v3.2 archive

= What does the "saveforth" word do? =
 
 * saveforth writes the current dictionary image that is running on the chip to eeprom. Each dot (period)  displayed represents one 64 byte page write to eeprom.  There are a maximum of 1024 pages of 64 bytes each.  If a word is redefined, the new definition is visible and covers up the old definition. Eventually the space this uses will be noticeable.  See the comments in PropForth.spin if you are interested in 128 byte page writes, but be aware that the prop demo board eeprom won't like it.  This was the bug in version 2.5

= What does the "spinmaker" word do? = 

  * The spinmaker word generates the forth portion of the [http://code.google.com/p/propforth/wiki/PropForthspin?ts=1279464157&updated=PropForthspin PropForth.spin] source file.  This gets rid of any old definitions and allows the propeller tool to resolve any forward references without the need for defered words.  

= Do I need the files PropForthPart1 and 2? =

  * Not necessarily. PropForthPart1.f and PropForthPart2.f will generate the original Propforth kernel definitions as found in [http://code.google.com/p/propforth/wiki/PropForthspin?ts=1279464157&updated=PropForthspin PropForth.spin].   

You only need these if you want to see that the definitions generated are the same as those posted, without the comments

However, if you wish to modify propforth itself, PropForthPart1.f and PropForthPart2.f contain the source code in forth.  If you wish to modify the propforth kernel using forth, these are the files to modify.

= What is the "Display Data Stack" word?  Why doesn't ".S" work? =

The standard 'display data stack' word .S is not implemented in the default kernel.  There is a plan for a 'development extensions' that will include the .s word, but it is not avaiable at this time. 

The word "st?" displays the stack in hex formatted to 8 hex digits. 

= What is the number base word? Why doesn't "BASE" work? =

UPDATED: mcwBase has been renamed to base in version 3.2

NOTE 
10 base w! / in hex, sets the base to 16 (decimal)
10 base w! / in decimal, sets the base to 16 (decimal)

set the base to decimal or hex using the kernekl words
{{{
hex
}}}

and 

{{{
decimal
}}}

In version 2.7 and earlier, the variable that holds the number base is mcwBase. The standard forth name "BASE" will be used in version 3.0 (planned)

= Can words be defined in the Cog memory rather than the Hub memory? =

  * Yes.  The original model included the ability to define high level forth words exclusive to the Cog that would use them.  Turns out, however, to be too difficult and complex; also, cog specific words tend to be the ones optimized into assembly.   Presently, the model is high level definitions in the common hub memory, and cog specific words in assembly. An example of assembly definitions that exist only in the cog that uses them is the Logic Analyzer module. See LogicAnalyzer.f

= What is the Logic Analyzer? =

  * LogicAnalyzer.f is a reorganization of la.f.  Some of the cryptic names are being changed to descriptive names.  If you can't find the file, its due to trouble sorting out the names. If you do find the file, it still might not be sorted out.  If your the type of person that needs a logic analyzer, your probably the type that can figure out la.f; If your just fiddling (what I do) please wait a little longer for LogicAnalyzer.f to be completed.  This message will be updated once LogicAnalyzer.f is tested.

  * LogicAnalyzer.f or la.f is the source code for the software logic analyzer.  It uses 1 to 4 cogs to provide logic analyzer functionality.  The file contains assembly definitions for fucntions that reside in the cogs, not the main dictionary.  The following are the names used in the current la.f file; these are to be renamed to more descriptive names with the release of LogicAnalizer.f

  * ds0 - samples every clock, no trigger;  runs on cogs 0, 1 , 2, and 3.

  * dspin - ( pronounced "ds - pin" ) defines the trigger pin, default is pin 10 

  * ds1 - samples every 4 clocks, triggers on dspin

  * ds2 - sample every 40 clocks, triggers on dspin

  * ds - sample every 40 clocks, no trigger

  * hza - toggle a pin at a frequency, for testing.  Starts propcounter (in the cog)  to oscilate dspin 

  * hzb - toggle a pin at a frequency, for testing.  Starts propcounter (in the cog)  to oscilate dspin

= What is does the "aslice" word do? =

  * aslice is an assembly level time slicer.  The assembly time slicing happens between forth words rather than between tasks.  This is the "me-first" time slicer.

= What is does the "fslice" word do? =

  * fslice (it is actually "underscore-fslice" but this wiki interprets underscope as a command to make everything italics) is forth level time slicer.  It works in the forth round robin software multitasker with pause and next.  This is the "wait for my turn / cooperative" time slicer 

= What is the difference between fslice and aslice? =

  * The round robin multitasker "fslice" happens between tasks.  The assembly multitasker "aslice" happens between forth words.   The result is that the assembler multitasker executed a LOT more often than the round robin.  The engineer has to know whats what about all this in order  to decide what to use.  

= What is "serialdriver.f"? =

  * The serial driver contains the same code as in the default senetry routine that run on cog 7 at boot time.  Since serial communications is not very demanding, it is possible to restart cog seven as a forth cog, and have cog 7 run the serial port, and run a serial monitor and a terminal and other useful functions.  

= What is "serialmonitor.f" =

  * This is a monitor which is meant to run on cog 7 along with the serial driver. It provides interpretation of CTL-A(connect terminal to the next cog) CTL-B(connect terminal to the previous cog) and CTL-C(reset the propeller chip). In addition it also monitors debugging in the other forth cogs to report stack overflows and underflows. This functionality is time-sliced by the forth time slicer, so cog 7 can also be used as a forth cog, albeit one that will run more slowly as it is time sliced at both by the assembler slicer and the forth slicer.

NOTE: serialmonitor.f NEEDS to have aslicer.f and serialdriver.f loaded before it.

= What is the difference between the SerialMonitor and the DeluxeSerialMonitor? =

  * The DeluxeSerialMonitor has all three files in a single archive, and the files are numbered in the order that they are to be loaded.  Otherwise the files are pretty much the same as the SerialMonitor files.  I just needed a different name for the zip-packaged version. 

= How to start an arbitrary cog executing an arbitrary word? =

  *the cogX word start a cog executing a word
  See [http://code.google.com/p/propforth/wiki/CogXInstructions CogXInstructions]

= what is the long term direction for PropForth? =

 * The goal is a "standard forth".  

 * The basic kernel will be a "hardware abstraction layer" to support the basic standard forth words.  

 * A "developer environment" to aid with typical development tasks, tailored for this hardware:  source code maintenance, debugging, interface to common external functions.  Possibly as extensions, possibly included in the kernel.  

  * Compatibility with existing standard forth code where possible 