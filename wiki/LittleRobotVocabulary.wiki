#summary Defining some terms used with LittlRobot(tm) Project
#labels v5.5,LittleRobot

= Introduction =

The LittleRobot Project pilot session has launched at a school.  The kids are 3rd to 8th grade.  

Some terms being used are similar but different in other contexts. This page is an attempt to get us all using the same words in the same way.

Clarity is one key to success.

= Terms =

New-Guy Notes: The summary given to the new participant.  The summary contains the necessary and available material we currently believe the new participant needs to get started.  The participant uses the material, and finds errors and deficiencies, and makes corrections and updates. The updated notes are reviewed by the previous maintainers. The each new participant becomes the next maintainer of the notes.  Each new participant demonstrates mastery of the material by teaching it to the next.

Manual:  By hand, you have to to do it your own self

Automatic: By machine, you just have to start it, and it goes by itself after that, until done. 

Magic:  Anything where we don't know how to do it, or don't understand well.

Science: Anything where we have a very good idea how to do it, or at least  believe we understand something important to the extent we can use it. 

Automagically:  Something automatic but we don't understood all the details how it works yet, but we can still USE it. 

Hardware:   The physical (touchable) bits of the project. When we decide how the physical parts are to be arranged, we want to stop touching them. This saves work and helps keep things from breaking.

Software:  The the organized instruction parts of the project.  Software is the parts that is easier to change than the hardware,  but we still want to stop touching the parts that we feel are organized. 

experiment: try something, to see if it gives the result we expect

test: a particular experiment that shows a particular item does what we expect

requirement:  the list of things to play with;  what we expect from our task.  Each big difficult task gets broken into small easy tasks, until we have lot of easy tasks instead of a few difficult tasks.  We end up with LOTS of requirements. A requirement is "done" when we have a test that shows it does what we expect.  Any task that idoes not do what we expect is not "done".

Monkey's Paw: The effect where the complex requirements is NOT broken into specific, easy requirements; and result is not what we want.   Short for "You can get what you want unless you can ASK for it specifically".  This indicates that the requirements need attention, and development is NOT complete. 

development:  the "play-time" where we break difficult tasks into easy tasks; and do experiments until we have particular tests that show all tasks are performed as expected.

program:  The organized instructions for the project IN THE BEST ORDER.  This includes DECIDING what the best order is, and having reasons for the decisions. Anytime we change our mind as to what BEST means, we have to see if the instructions need to be re-organized. 

code:  Source code, this can be any collection of source code.  This will talk about the WRITING aspect of the program, as in "typing in the source code".

Robot: Any machine that does a task automaticly

Prop:  The Parallax Propeller Microcontroller 

FORTH:  The forth programming language

!PropForth:  FORTH on the Prop

word:  A program or functional software routine in forth.  Usually a forth word definitions starts with a colon `:` and ends with a semicolon `;`

dictionary: the list of words in the forth dictionary

`words`: a PROPFORTH instruction that lists all the words in the propforth dictionary 

stack notes:   See below 

pin: one of the 32 i/o pins on the prop chip. the pins are NUMBERED 0 TO 31 

`pinin`:  Makes the pin an input so it "listens" to signals on the pin

`pinout`: Makes the pin an output so it "talks" to external devices.

`pinhi`:  sets the pin to the TRUE or HI state (3.3 volts)

`pinlo`: sets the pin to the FALSE or LOW state (0 volts or ground).

Vin:  the input voltage from USB or Battery pack.  In our case it 4.8 to 5.0 volts; but BE CAREFUL; in some cases it can be as high as 12 volts and and this could damage things not properly connected

Vdd: the operatins voltage of the prop, 3.3 volts

Vss: the Ground of the prop, 0 volts

Design: The plan for what the project is intended to do, and how its supposed to work.  If ANY part of the plan is changed, all other parts must be checked to see it they must change as well. 

= other terms we might use =

  * Right and wrong: these are SUBJECTIVE, the meaning can change depending on who is doing the talking and who is doing the listening. 
    * Right: We think something is "right" if we have seem this to work well in the past.  We think that this might continue to work, until somebody shows us different.
    * Wrong:  We think something is "wrong" if we have seen that this does not do what we need it to do.  We think this "wrong" until somebody shows us different. 

Anything we call WRONG may turn out to be right, and anything right may later turn out to be wrong.  BE CARE, let things change when you have evidence!

== STACK NOTE ==

The note that says what a propforth function takes from the stack as input, and what it leave on the stack as output. Ususally the stack note has zero or more numbers that represent the inputs, a dash, and zero or more numbers that represent the ouputs.

` ( inputs - outputs) `

 * `n` - n means and integer number
 * `f` - means a flag, 1 or zero,  0 means FALSE and not zero means TRUE.  Usually -1 is TRUE, but any non zero number can also be true
 * `A` - alpha character.  This would be any letter.
 * `alphanumeric` - any letter that can be typed from the keyboard



= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages