#summary Tutorial on Getting  Propforth 4.0 running
#labels v4.0

= On this version, Instructions are in the README file =

Download the release archive and unpack it to your work area.

http://code.google.com/p/propforth/downloads/detail?name=2010NOV29%20V4.0%20RELEASE.zip

Find the README.txt file.  These are the instruction straight from the author himself. 

However, the instructions were Sal's "notes"  during development

You mission, should decide to accept it, is to help re-write the notes in a form the regular people can use.  However, if you do not accept this mission, you will self destruct in five seconds. Good luck.

=  What's in the Readme file =

This is a set of Sal's regression testing the he performs each time he updates propforth. 

Please notice, these are the critical "Highlights" that show the final results.  He does a LOT more during development.   So, some of the steps that are "obvious" are left out.  Unfortunately for you and me, these steps are not so obvious.   So lets re examine this to see what we can see.

README.TXT - analysis

Lines  1-36  - description of release.  Useful to read.  

Lines 37-80  - HARDWARE configuration.  Optional,  if you do not want to try the multi-prop AND spinneret material

 line 39 description for testbed MASTER - protoboard
 
 line 40 description of testbed SLAVE  - P8X32A-D40

 line 41 description of spinneret ETHERNET - 

SLAVE prop and SPINNERET are optional, I don't have my spinneret yet, so I'm only adding SLAVE

 line 43 - safety resistors install these if using optional hardware       

= TEST HARDWARE = 

== MASTER ==

Line 49  - Use any prop chip with a 5Mhz crystal and a 64K or greater EEPROM.  This specifically used a stock protoboard.  This is the chip that we load the spin image into EEPROM, a will be talking to via PC serial port terminal program

== SLAVE ==

Line 52 - This can be any prop chip. It does NOT need and EEPROM, in fact, for this experiment, it probably should NOT have any EEPROM, as we want to emulate the salve's EEPROM.  This test configuration specifically uses a 40 pin dip P8X32A-D40. 

== Physical Connections ==

See Brian Riley's wiring diagram.  It looks ok to me, remember, this instruction discusses protoboard as MASTER, but the result is the same.

http://forums.parallax.com/attachment.php?attachmentid=76056&d=1291441338


=== MASTER to SLAVE ===

==== EEPROM Emulations and Synchronous serial connection =====

Initially, this connection is use for the MASTER to emulates the EEPROM for the SLAVE, so the MASTER can send over a copy of his code when the slave boots.  

AFTER the slave is booted, this same connection is used as the high speed synchronous serial connection.  

Line 53 - The SLAVE NEEDS a .1 uF capacitor between power and ground RIGHT NEXT to the chip.  Don't ask me why, I don't know, I just follow instructions. 

Line 55 - connect a 10K resistor between SLAVE PIN 38 ( I/O port P29 ) and Vdd +3.3 volts.  This pin will ALSO connect to the master in the next step

Line 58 - Protoboard MASTER P8 connects thru a 220 ohm resistor to DIP40 Pin 37 ( I/O Port P28) 

Line 59 - Protoboard MASTER P9 connects thru a 220 ohm resistor to DIP40 Pin 38 ( I/O Port P29) This pin also has the 10K pull up to Vdd

Line 60 - Protoboard MASTER P10 connects directly (no resistor) to DIP40 Pin 11 ( RESn RESET) This is just a straight wire.   OK, it probably bends a little, mine did.

Line 61 - Protoboard MASTER P11 connects directly (no resistor) to DIP40 Pin 30 ( XI Crystal input) This is just a straight wire.   OK, it also bends a little, mine did.

==== secondary asynchronous serial connections ====

Line 63 - This is a secondary serial connection.  Some of the tests use it?  I skipped this the first time through and the tests froze.  Trying is out now....  

Connect the MASTER's I/O ports P0 and P1 to the slaves default serial lines p30 and P31 using 220 ohm resistors as before:

Line 65 - Protoboard MASTER P0 connects thru a 220 ohm resistor to DIP40 Pin 39 ( I/O Port P30) 

Line 66 - Protoboard MASTER P8 connects thru a 220 ohm resistor to DIP40 Pin 40 ( I/O Port P31) 

The MASTER will be able to talk to the SLAVES serial port just like any terminal program would.  If you want additional serial ports on the MASTER like walimu does, this is the example of how to set it up using MASTER P0 and P1. 

=== MASTER to SPINNERET ===

I don't have my spinneret yet.  I skipped this for now 20101205 

= PropForth 4.0 Source Files =

Ok. Now for some BRANIO re-organization.  Many (most?) of the issues folks have been reporting are due to confusion in the source files.   There are a bunch of source files, and they are handled differently, and are used for different purposed and they are all bunched together.  So I made progress after I re-organized them like so:  This instruction ask you to RE-NAME the files with a NUMBER in front so you can tell what order they are used in.  That way, are less like to forget one. (Which is why you had problems earlier in the week). 

== PART A The {{{00-README.TXT}}} file ==

Line 104 - I jumped ahead. Humor me here -  Rename {{{README.txt}}} to  {{{00-README.txt}}}

It will move to the top of the directory listing in windows, and we can see that is has already been accounted for in the instructions.  

== PART B - Regression test == 

The ultimate regression test of propforth is to have it re-create its own source.  It uses every function in this process.  (any function it does NOT use are in other files and tested separately.) This is optional, you can skip this and trust us that we did this already.  Wise people NEVER trust that this was done; personally I end up having to skip this all the time, and stuff blows up as a result. 

The recommended method is to run the regression test at least once when you get a new release to confirm I didn't miss anything.  

Load the kernel, load spinmaker, recreate the spin source, check that it came out the same as it went in; as described below:

=== Kernel ===

Line 82 {{{Propforth.spin}}} - the tiniest kernel that Sal could make that is still what he call "propforth".  Load this into the protoboard EEPROM to make the protoboard "MASTER". It doesn't say MASTER anywhere yet, because he has no slaves yet.

Line 83 - 110 Descriptions of the files that will be used

Please rename {{{Propforth.spin}}} to 01-Propforth.spin

Line 113 - Using {{{PropTool}}} on the PC, load 01-Propforth.spin into MASTER's EEPROM

line 119 - Using {{{teraterm}}}, verify the forth prompt appears.

Line 121  (step 4) - execute the word 'words' to show that the dictionary is populated

{{{
words
NFA (Forth/Asm Immediate eXecute) Name
00397A F   fsdrop               003866 F   fswrite              003852 F   (fsk)                003836 F   fsload
003810 F   (fsload)             0037F4 F   fsread               00377A F   (fsread)             003708 F   fsls
0036CC F   fsfree               0036BA F   fsclear              003688 F   fsclr                00364C F   (fslast)
0035FE F   (fsfind)             0035C2 F   (fsfree)             00358C F   (fsrd)               003556 F   (fswr)
003530 F   (fsnext)             003518 F   (fspa)               003508 F   EC@                  0034EA F   EW@
00342C F   _eeread              003398 F   eereadpage           003350 F   _eeread              00333E F   padbl

....

000CF6 F   prop                 000CC4 F   (version)            000CB0 F   (prop)               000CA2 F   propid
000C94 F   memend               000C86 F   dictend              000C7A F   here
Prop0 Cog6 ok


}}}

.... goes on for many lines

== Recreate the kernel from its source ==


Line 123 - Paste the content of {{{PropForthCore.f}}} into {{{teraterm}}}

Rename {{{PropForthCore.f}}} to {{{02-PropForthCore.f}}} so it moves to its proper sequence in the list

Line 124 - Paste the content of {{{spinmaker.f}}} into {{{teraterm}})

Rename {{{spinmaker.f}}} to {{{03-spinmaker.f}}} so it moves to its proper sequence in the list

START THE LOG FOR TERATERM - this will capture the text generated by spinmaker.  Otherwise, you can just let is run, and copy the output from the teraterm window after its finshsed, I think using the log is easier. 

Execute the word {{{spinmaker}}} at the forth prompt

This runs for a couple minutes at least.

{{{
Prop0 Cog6 ok
spinmaker

ForthDictStart

                        word    0
hereNFA                 byte    $84,"here"
herePFA                 word    (@a_dovarw - @a_base)/4
                        word    $0000

.... < goes for a couple minutes>...

                        long    0,0, 0,0, 0,0, 0,0,  0,0, 0,0, 0,0, 0,0
                        long    0,0, 0,0, 0,0, 0,0,  0,0, 0,0, 0,0, 0,0
                        long    0,0, 0,0, 0,0, 0,0,  0,0, 0,0, 0,0, 0,0
                        long    0,0, 0,0, 0,0, 0,0,  0,0, 0,0, 0,0, 0,0
ForthDictEnd
ForthMemoryEnd

Prop0 Cog6 ok
}}}

Line 129 - Sal used {{{WinDiff}}}, {{{Prof_Braino}}} used {{{PSPad}}}.  From {{{ForthDictStart}}} to {{{ForthMemoryEnd}}} the dictionary matches correctly.  

Therefore, {{{PropForth.spin}}} can load {{{PropForthCore.f}}} and use {{{spinmaker.f}}} to re-create {{{PropForth.spin's}}} forth definitions.

Test successful. 

== PART C - the new {{{PropForth 4.0 }}} material == 

mini EEPROM File system

=== load EEPROM mini-filesystem source code ===

_NOTICE: before performing this step, edit fs.f it has an error.  fs.f line 30 (in the comments section) should also be a comment.  Add a slash to the beginning of this line or you will get an error.  It's probably a small thing, but since we are having trouble we will remove ALL errors until it works._


line 132 - EEPROM file system

reboot

paste fs.f into teraterm

saveforth

Please rename {{{fs.f}}} to {{{10-fs.f}}} 

_NOTICE:  This might look little weird here, this is how I think.

_So far we have {{{00-README.TXT}}} which is the over view and general instructions. We keep referring back to {{{00-README.TXT}}}

_We have the regression test material, {{{01-PropForth.spin}}} {{{02-PropForthCore.f}}} {{{03-spinmaker.f}}} 

_Now that we are into the actual new functions of Propforth version 4.0, the file name prefixes jump to {{{10-xxx.f}}}.

_If this doesn't make sense, please suggest another way to organize it.  This is not my strongest point._

=== initialize the EEPROM mini-filesystem ===

line 134 - {{{fsclear}}}

_NOTICE: This is where folks started to have trouble.  Must remember to load each file, do the saveforth, and execute the initialization words.   If you get and error, somethings gone wrong, start again._



=== load new 4.0 functions' source code into the EEPROM filesystem ===

{{{
propforth.f
LogicAnalyzer.f
asm.f
norom.f
com.f
comnorom.f
snet.f

}}}

If it helps to keep organized, they this- rename the files after loading as you go: 

rename {{{propforth.f}}} to {{{11-propforth.f}}}

rename {{{LogicAnalyzer.f}}} to {{{12-LogicAnalyzer.f}}}

rename {{{asm.f}}} to {{{13-asm.f}}}

rename {{{norom.f}}} to {{{14-norom.f}}}

rename {{{com.f}}} to {{{15-com.f}}}

rename {{{comnorom.f}}} to {{{16-comnorom.f}}}

rename {{{snet.f}}} to {{{17-snet.f}}}


Line 146 -12. fsls - file system listing

{{{
fsls

008000 002272 propforth.f
00A280 000E77 LogicAnalyzer.f
00B140 0020CE asm.f
00D240 000D0F norom.f
00DF80 001426 com.f
00F3C0 000221 comnorom.f
00F600 000112 snet.f

8C0  bytes free in files system
}}}

Get a listing of the file EEPROM system.  I got the exact results that Sal did, if you do the same steps, you should too. 

Line 162  step 13 - reboot.  IF you did all the steps correctly, the kernel should be loaded with the proper dictionary and the proper source files are in EEPROM.  You can do a reset or reboot to return to this point if you make a mistake or get an error. 


=== Load LogicAnalyser ===

The Software  logic analyzer is one of the cooler things in propforth.  If you don't know how to use a logic analyszer or even what it is (I sure don't) just do these steps anyway.  The logic analyszer is NOT required.  BUT it is part of this test, and since we have an example that works, it will serve at an intro to LogicAnalyzers to all the users.

type in 

{{{ fsload LogicAnalyzer.f}}}

You will the source code scrolling across the screen just as before when we did the load to EEPROM.  The difference is that it is now compiled into the dictionary.  

_NOTICE - IF you did NOT see the code scrolling across the screen, the source code did not load into the dictionary.  type in "words" and you should:_

{{{
words
NFA (Forth/Asm Immediate eXecute) name
displayTriggerFrequency004....
}}}

_If the last definition in the dictionary (the frist word printed) is NOT displayTriggerFrequency, then something went wrong.  Stop amd try again._

_NOTICE - IF you COPY and PASTE the text {{{ fsload LogicAnalyzer.f}}} from the readme.txt file, the source might not scroll.  There could be a bug in fs.f, or someplace else.  Watch out for this so you don't get stuck._

An interesting aspect of the logic analyzer is that a whole bunch of this stuff is in assembler and is compiled only to the cog in which it is running.  There are labels in the main hub dictionary, but the executable assebler is only in the targeted cog.  

BE CAREFUL.  You can see the labels from ANY cog (they are in the main dictionary) BUT only the target cog can run LogicAnalyzer because she's the only one with the assemble routines.  The other guys may try, but they will probably crash or go crazy.  So be aware of this.


=== Check the High Speed Synchronous Serial clock with software logic analyzer ===

This is the cool part.  The High Speed Synchronous Serial channels are similar to Beau Schwabe's High Speed Serial from 

http://forums.parallax.com/showthread.php?99222-Propeller-DEMO-(14.5-Meg-Baud)-High-Speed-Prop-to-Prop-Serial-Communication

It worked in the 3.6 development release.  I don't think I got "broken" during the clean up, but something is at lest "different".   

We are now going to start up the clock for this, and check them using the propforth software logic analyzer. 

Here goes:

Line 164 - execute the following at the forth prompt- starts up 2 clocks on IO pins A & B

{{{c" hex a aae60 setHza b 6ACFC0 setHzb" 5 cogx}}}

_NOTE:  on the parallax forum thread,

http://forums.parallax.com/showthread.php?127549-PropForth-4.0-is-available-for-download

starting at post #7

this is the point at which 'caskaz' had an error.  I had the exact same error until I went thru and started renaming all the files to make sure I did everything in the right order.  After I did it a second (ok fifth) time and made sure I did everything in the right order and didn't skip any steps, it worked.  So the instructions in the readme aren't wrong, per se, that are just a little complicated and hard to follow.  Maybe Brian can get them right the first time, but I sure couldn't.  Hang in there it will work._ 

*_EDIT - As in the NOTICE above - If you get UNDEFINED WORD for 'sampleNoTrigger', the source did not load.  Do Not copy and paste ' "fsload LofgicAnalyzer.f" ' into teraterm; you must type it in. Then it works (at least for me). _*

Execute the following words:

{{{
sampleNoTrigger
sampleTrigger
sampleFourTrigger
sampleOneNoTrigger

decimal displayTriggerFrequency hex
}}}

After each you should see the logic diagrams for hi and low on the control pins:

{{{
sampleNoTrigger

0A-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_

0B_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--

0C________________________________________________________________________________________________________________________________________________________________

0D________________________________________________________________________________________________________________________________________________________________

0E________________________________________________________________________________________________________________________________________________________________

0F________________________________________________________________________________________________________________________________________________________________

10________________________________________________________________________________________________________________________________________________________________

11________________________________________________________________________________________________________________________________________________________________
Prop0 Cog6 ok

sampleTrigger

0A-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_-_--_-_-_-__-_-_

0B--__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--_-__-_--

0C________________________________________________________________________________________________________________________________________________________________

0D________________________________________________________________________________________________________________________________________________________________

0E________________________________________________________________________________________________________________________________________________________________

0F________________________________________________________________________________________________________________________________________________________________

10________________________________________________________________________________________________________________________________________________________________

11________________________________________________________________________________________________________________________________________________________________
Prop0 Cog6 ok
sampleFourTrigger

0A_____________--------------_______________--------------______________---------------______________--------------______________---------------__________________

0B_--_-__-__-__-_--_--_--_-__-__-__-_--_--_--_-__-__-__-_--_--_--_-__-__-__-_--_--_--_-__-__-__-_--_--_--_-__-__-__-_--_--_--_-__-__-__-_--_--_--_-__-__-__-______

0C________________________________________________________________________________________________________________________________________________________________

0D________________________________________________________________________________________________________________________________________________________________

0E________________________________________________________________________________________________________________________________________________________________

0F________________________________________________________________________________________________________________________________________________________________

10________________________________________________________________________________________________________________________________________________________________

11________________________________________________________________________________________________________________________________________________________________
Prop0 Cog6 ok
sampleOneNoTrigger

0A____________----------------------------------------------------------_________________________________________________________---------------------------------

0B____------_____------______-----______------______-----______------_____------______------_____------______-----______------______-----______------_____------__

0C________________________________________________________________________________________________________________________________________________________________

0D________________________________________________________________________________________________________________________________________________________________

0E________________________________________________________________________________________________________________________________________________________________

0F________________________________________________________________________________________________________________________________________________________________

10________________________________________________________________________________________________________________________________________________________________

11________________________________________________________________________________________________________________________________________________________________
Prop0 Cog6 ok
decimal displayTriggerFrequency hex
695652.173
Prop0 Cog6 ok


}}}


Did it work?  YES! You see! It WORKS! HA HA HA HA HA!  And they said I was mad! Muhuhahahah!

But I digress.  Be sure to hit a carriage return after each command:  sometimes it says UNDEFINED WORD after execution.  I don't know why it says this, I have to ask Sal.  I THINK there can be junk in the buffer when something switches, but I have not arrowed it down any further as I am writing this. 


ALSO- I got different logic diagrams than Sal posted in the README.TXT.  Sal's 0C, 0D, 0E  were hi, mine were low.  I don't know If I skipped a step or if he skipped a step or performed and extra (unrecorded) step.  In any case, I seem to get the same thing every time, please post to the parallax forum if you see the same of different. 

ALSO - I got two different results for the displayTriggerFrequency and I don't know why.

{{{
Prop0 Cog6 ok
decimal displayTriggerFrequency hex
695652.173
Prop0 Cog6 ok

Prop0 Cog6 ok
decimal displayTriggerFrequency hex
701754.385
Prop0 Cog6 ok

}}}

=== set up the High Speed Synchronous Serial channels ===

Line 257 - set up com.f

reboot

fsload com.f

You should see the source code scroll across the screen. the last definition inthe dictionary (check with words) should be comslave

Line 260 - define some words:


{{{
fl
: cominit
	c" 14 15 FF 3 commaster" 4 cogx
	c" 14 15 FF 3 comslave" 5 cogx
	100 delms
	0 0 5 0 (ioconn)
	1 0 5 1 (ioconn)
	2 0 5 2 (ioconn) ;

: comstat 4 cogio dup comcnt L@ . comerr L@ . 5 cogio dup comcnt L@ . comerr L@ . cr ;
}}}

cominit make cog 4 (on both master and slave) handle master transmissions; and makes cog 5 (on both master and slave) handle slave transmissions

comstat displays the number of packet s sent out over the channel, followed by the number of errors on the channel. 

Line 273 - step 16 execute the following at the prompt

{{{
cominit comstat
4 0 term 
}}}

You should have seen this sequence displayed:

{{{
Prop0 Cog6 ok
cominit comstat
CE 0 EC 0
Prop0 Cog6 ok
4 0 term
Hit CTL-F to exit term

Prop0 Cog0 ok
}}}

The output indicates that cog 4 saw CE hex (206 decimal) packets and zero errors, and cog 5 saw EC hex (236 decimal) packets and 0 errors.  They did not display the same value because we check cog 5 a couple milliseconds later.  Is it 30packets/96packets per second = 0.3125 seconds? That seems a little long, but maybe I don't have it right. 

Also, NOTICE that we are CONNECTED to the SLAVE prop at this point.  The instruction should include a step to change the SLAVE's PROP-id, but that it done later, so we can take this on faith for the time being. 

BE SURE TO DO THE CTL+F here to exit from the SLAVE CONNECTION.  I forgot to do this one and could not figure out why i got stuck.  I was asking the slave to connect to HIS slave, and there isn't one, so it appeared to lock up. Sorry , these are just demos, when we get the real applications running this will be clearer. 

lines 308 and 309 show that you can put items on the slave cog0 stack, and pop them off. 

When you do the CTL+F, the prompt changes from cog0 (on slave) to cog6 (on master)


=== SLAVE no ROM

line 314, 316 step 17 -  slave no ROM tests

AFter reboot, the dictionary is cleared, load norom.f from EEPROM:

{{{
fsload norom.f
}}}

Be sure the text scrolls down the screen, or the load was not successfull

Define the words:

{{{
fl
: bootslave 8 9 A B rambootnx ;
: demo bootslave 1 0 e100 4 startserialcog 10 delms 4 0 term ;

\ 4 0 term - will connect again after demo is run
}}}

lines 320 to 325 show what you paste into the terminal, lines 327 to 334 show what is echoed back.

Line 335 - execute the demo:

{{{
demo
}}}

And this is where it locked up for me.


Well, I got pretty far.  I probably left something off.  In fact I think I left off the second asynchronous serial connection.  I'll put that in and try once more. Probably won't post till later, I'm getting worn out. 

Cheers! 

Braino

= under construction =

Still adding text 2010-12-05

= End of page =