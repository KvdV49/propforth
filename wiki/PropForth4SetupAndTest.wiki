#summary Tutorial on Getting  Propforth 4.0 running
#labels v4.0

= On this version, Instructions are in the README file =

Download the release archive and unpack it to your work area.

http://code.google.com/p/propforth/downloads/detail?name=2010NOV29%20V4.0%20RELEASE.zip

Find the README.txt file.  These are the instruction straight from the author himself. 

However, the instructions were Sal's "notes"  during development

You mission, should decide to accept it, is to help re-write the notes in a form the regular people can use.  However, if you do not accept this mission, you will self destruct in five seconds. Good luck.

=  What's in the Readme file =

This is a set of Sal's regression testing the he performs each time he updates propforth. 

Please notice, these are the critical "Highlights" that show the final results.  He does a LOT more during development.   So, some of the steps that are "obvious" are left out.  Unfortunately for you and me, these steps are not so obvious.   So lets re examine this to see what we can see.

README.TXT - analysis

Lines  1-36  - description of release.  Useful to read.  

Lines 37-80  - HARDWARE configuration.  Optional,  if you do not want to try the multi-prop AND spinneret material

 line 39 description for testbed MASTER - protoboard
 
 line 40 description of testbed SLAVE  - P8X32A-D40

 line 41 description of spinneret ETHERNET - 

SLAVE prop and SPINNERET are optional, I don't have my spinneret yet, so I'm only adding SLAVE

               line 43 - safety resistors install these if using optional hardware       

= TEST HARDWARE = 

== MASTER ==

Line 49  - Use any prop chip with a 5Mhz crystal and a 64K or greater EEPROM.  This specifically used a stock protoboard.  This is the chip that we load the spin image into EEPROM, a will be talking to via PC serial port terminal program

== SLAVE ==

Line 52 - This can be any prop chip. It does NOT need and EEPROM, in fact, for this experiment, it probably should NOT have any EEPROM, as we want to emulate the salve's EEPROM.  This test configuration specifically uses a 40 pin dip P8X32A-D40. 

== Physical Connections ==

See Brian Riley's wiring diagram.  It looks ok to me, remember, this instruction discusses protoboard as MASTER, but the result is the same.

http://forums.parallax.com/attachment.php?attachmentid=76056&d=1291441338


=== MASTER to SLAVE ===

==== EEPROM Emulations and Synchronous serial connection =====

Initially, this connection is use for the MASTER to emulates the EEPROM for the SLAVE, so the MASTER can send over a copy of his code when the slave boots.  

AFTER the slave is booted, this same connection is used as the high speed synchronous serial connection.  

Line 53 - The SLAVE NEEDS a .1 uF capacitor between power and ground RIGHT NEXT to the chip.  Don't ask me why, I don't know, I just follow instructions. 

Line 55 - connect a 10K resistor between SLAVE PIN 38 ( I/O port P29 ) and Vdd +3.3 volts.  This pin will ALSO connect to the master in the next step

Line 58 - Protoboard MASTER P8 connects thru a 220 ohm resistor to DIP40 Pin 37 ( I/O Port P28) 

Line 59 - Protoboard MASTER P9 connects thru a 220 ohm resistor to DIP40 Pin 38 ( I/O Port P29) This pin also has the 10K pull up to Vdd

Line 60 - Protoboard MASTER P10 connects directly (no resistor) to DIP40 Pin 11 ( RESn RESET) This is just a straight wire.   OK, it probably bends a little, mine did.

Line 61 - Protoboard MASTER P11 connects directly (no resistor) to DIP40 Pin 30 ( XI Crystal input) This is just a straight wire.   OK, it also bends a little, mine did.

==== secondary asynchronous serial connections ====

Line 63 - This is a secondary serial connection.  Some of the tests use it?  I skipped this the first time through and the tests froze.  Trying is out now....  

Connect the MASTER's I/O ports P0 and P1 to the slaves default serial lines p30 and P31 using 220 ohm resistors as before:

Line 65 - Protoboard MASTER P0 connects thru a 220 ohm resistor to DIP40 Pin 39 ( I/O Port P30) 

Line 66 - Protoboard MASTER P8 connects thru a 220 ohm resistor to DIP40 Pin 40 ( I/O Port P31) 

The MASTER will be able to talk to the SLAVES serial port just like any terminal program would.  If you want additional serial ports on the MASTER like walimu does, this is the example of how to set it up using MASTER P0 and P1. 

=== MASTER to SPINNERET ===

I don't have my spinneret yet.  I skipped this for now 20101205 

= PropForth 4.0 Source Files =

Ok. Now for some BRANIO re-organization.  Many (most?) of the issues folks have been reporting are due to confusion in the source files.   There are a bunch of source files, and they are handled differently, and are used for different purposed and they are all bunched together.  So I made progress after I re-organized them like so:  This instruction ask you to RE-NAME the files with a NUMBER in front so you can tell what order they are used in.  That way, are less like to forget one. (Which is why you had problems earlier in the week). 

== section 00 - The {{{README.TXT}}} file ==

Line 104 - I jumped ahead. Humor me here -  Rename {{{README.txt}}} to  {{{00-README.txt}}}

It will move to the top of the directory listing in windows, and we can see that is has already been accounted for in the instructions.  

== section 01 - Regression test == 

The ultimate regression test of propforth is to have it re-create its own source.  It uses every function in this process.  (any function it does NOT use are in other files and tested separately.) This is optional, you can skip this and trust us that we did this already.  Wise people NEVER trust that this was done; personally I end up having to skip this all the time, and stuff blows up as a result. 

The recommended method is to run the regression test at least once when you get a new release to confirm I didn't miss anything.  

Load the kernel, load spinmaker, recreate the spin source, check that it came out the same as it went in; as described below:

=== Kernel ===

Line 82 {{{Propforth.spin}}} - the tiniest kernel that Sal could make that is still what he call "propforth".  Load this into the protoboard EEPROM to make the protoboard "MASTER". It doesn't say MASTER anywhere yet, because he has no slaves yet.

Line 83 - 110 Descriptions of the files that will be used

Please rename {{{Propforth.spin}}} to 01-Propforth.spin

Line 113 - Using {{{PropTool}}} on the PC, load 01-Propforth.spin into MASTER's EEPROM

line 119 - Using {{{teraterm}}}, verify the forth prompt appears.

Line 121  (step 4) - execute the word 'words' to show that the dictionary is populated

{{{
words
NFA (Forth/Asm Immediate eXecute) Name
00397A F   fsdrop               003866 F   fswrite              003852 F   (fsk)                003836 F   fsload
003810 F   (fsload)             0037F4 F   fsread               00377A F   (fsread)             003708 F   fsls
0036CC F   fsfree               0036BA F   fsclear              003688 F   fsclr                00364C F   (fslast)
0035FE F   (fsfind)             0035C2 F   (fsfree)             00358C F   (fsrd)               003556 F   (fswr)
003530 F   (fsnext)             003518 F   (fspa)               003508 F   EC@                  0034EA F   EW@
00342C F   _eeread              003398 F   eereadpage           003350 F   _eeread              00333E F   padbl

....

000CF6 F   prop                 000CC4 F   (version)            000CB0 F   (prop)               000CA2 F   propid
000C94 F   memend               000C86 F   dictend              000C7A F   here
Prop0 Cog6 ok


}}}

.... goes on for many lines

== Recreate the kernel from its source ==


Line 123 - Paste the content of {{{PropForthCore.f}}} into {{{teraterm}}}

Rename {{{PropForthCore.f}}} to {{{02-PropForthCore.f}}} so it moves to its proper sequence in the list

Line 124 - Paste the content of {{{spinmaker.f}}} into {{{teraterm}})

Rename {{{spinmaker.f}}} to {{{03-spinmaker.f}}} so it moves to its proper sequence in the list

START THE LOG FOR TERATERM - this will capture the text generated by spinmaker.  Otherwise, you can just let is run, and copy the output from the teraterm window after its finshsed, I think using the log is easier. 

Execute the word {{{spinmaker}}} at the forth prompt

This runs for a couple minutes at least.

{{{
Prop0 Cog6 ok
spinmaker

ForthDictStart

                        word    0
hereNFA                 byte    $84,"here"
herePFA                 word    (@a_dovarw - @a_base)/4
                        word    $0000

.... < goes for a couple minutes>...

                        long    0,0, 0,0, 0,0, 0,0,  0,0, 0,0, 0,0, 0,0
                        long    0,0, 0,0, 0,0, 0,0,  0,0, 0,0, 0,0, 0,0
                        long    0,0, 0,0, 0,0, 0,0,  0,0, 0,0, 0,0, 0,0
                        long    0,0, 0,0, 0,0, 0,0,  0,0, 0,0, 0,0, 0,0
ForthDictEnd
ForthMemoryEnd

Prop0 Cog6 ok
}}}

Line 129 - Sal used {{{WinDiff}}}, {{{Prof_Braino}}} used {{{PSPad}}}.  From {{{ForthDictStart}}} to {{{ForthMemoryEnd}}} the dictionary matches correctly.  

Therefore, {{{PropForth.spin}}} can load {{{PropForthCore.f}}} and use {{{spinmaker.f}}} to re-create {{{Propforth.spin's}}} forth definitions.

Test successful. 

== section 02 - the new {{{PropForth 4.0 }}} material == 

mini EEPROM File system

=== load EEPROM mini-filesystem ===

line 132 - EEPROM file system

reboot

paste fs.f into termterm

saveforth















= under construction =

Still adding text 2010-12-05

= End of page =