#summary Setup for GO  language using CSP channels.
#labels v5.0,cspchannels

= Introduction =

Propforth uses communication channels similar to those in CSP
http://www.usingcsp.com/

GO language also uses similar communications channels
http://golang.org/

The idea is to use the Prop for interfacing to sensors and actuators, and using a workstation to do the number crunching,  network communication, display, operator input and storage services.

The prop and the workstation interface will be the CSP communications channels between propforth and the GO language (or any other that supports communications channels) on the workstation.

= SETUP The Work Station =

The big issue is that some OS use -forward- slash (/) and some use backslash (\), this serves to screw up the path names.  This configuration aims to resolve those issues in a standard, reproducible manner. 

NOTE:  I tried to setup my rig so the data was on the G drive instead of the C drive, and it DID NOT work.  So these instructions are exactly the way Sal did it using C drive.  Now, to see if it works....

The communications channels make the device on the other end transparent.  So we want to be able to show that OS (windows, linux, Mac) ar4e equivalent, and the particular workstation (x86 PC, Mac, Raspberry Pi, ZipIt2) are functionally equivalent, and so the workstation hardware can be scaled to the task at hand. 

= Target tool chain for workstation =

The workstation tool chain will be (for now): 
 # windows XP
 # GO language
 # EMACS text editor

----

== GO Language ==

 _assuming the workstation is  windows XP_

Download the newest version of go, we used 2012-03-13.windows-386.zip

http://code.google.com/p/go/downloads/detail?name=go.weekly.2012-03-13.windows-386.zip&can=2&q=

Move Go directory to C:\go

NOTICE: When extracted to the destination directory, verify that you end up with 3,327 files in 360 folders in the go directory.  I used a older slow machine, and the extract stopped before completion for the first couple tries. 

== Windows XP ==

We're starting with windows xp since its already on a machine


Steps -


 * Control panel - system - advanced - environment variables 

 * User Variables for `<USER_NAME>` - NEW
  * New User Variable 
    * Variable name: {{{ HOME }}}
    * Must be in uppercase 
  * Variable Value: {{{   C:\Documents and Settings\<username>\My Documents\Go-Docs }}}
    * The final location can be anything you want to type all the time. We tested the names 'Go-Docs' and 'GoFiles'. Avoid names with spaces, etc. 
    * Selecting a path in `My Documents` ends up with the characteristically silly extra long path names.  But apps tend to look here by default, and in this case the path was not too long so it worked.   

 * System Variables - (existing variable) PATH - Edit 

   PATH
   edit - add this at the end of the value that is already there...
{{{
... ;c:\go\bin
}}}

 NOTES: a) There probably shouldn't be spaces in the path line, this might be why it didn't work for me using G:  b) MUST be lowercase  c) On one machine the variable was `PATH` and on another it was `Path`.  Use whatever is already there. 


 * system variables  - New
  * Variable name: {{{ GOROOT }}}  

  GOROOT must be uppercase

  * Variable Value: {{{  c:\go }}}

  MUST be lowercase

CHECK: 

From Dos shell (START > Run... > Open: *cmd* ):
{{{ 
path
echo %GOROOT%
echo %HOME%
 }}}

Must be uppercase

should reflect the changes we made

From Dos shell command line prompt type:
{{{
 go
}}}

should give go description, if so, go setup complete!

{{{
C:\Documents and Settings\user-name>GO
Go is a tool for managing Go source code.
...
}}}

So far, so good....

----

== EMACS Editor ==

EMACS was selected since it has aspects which make it compatible with (people who think in propforth) forth.   Each user is free to use an alternative editor or environment, alternate configurations will be posted as they are made available.

=== download emacs ===

From the EMACS page http://www.gnu.org/software/emacs/

Find Obtaining/Downloading GNU Emacs http://ftp.gnu.org/pub/gnu/emacs/windows/

The version we used is:

  http://ftp.gnu.org/pub/gnu/emacs/windows/emacs-23.3-bin-i386.zip

Copy or Move the files under `<download>\emacs-23.3-bin-i386\emacs-23.3` to a directory you create called `c:\emacs`
 

 Navigate to  c:\emacs\bin

 make shortcut to  runemacs.exe 

 move/copy this short cut to your desktop and/or quickstart-bar

 The Icon should display the EMACS logo

 Right click the EMACS shortcut, edit the properties; change Start-in directory to:  
{{{
C:\Documents and Settings\<username>\My Documents\Go-Docs
}}}

 Click the EMACS shortcut to launch EMACS.  EMACS should create a sub-directory named `.emacs.d` in your 
{{{
C:\Documents and Settings\<username>\My Documents\Go-Docs
}}} 

 directory.

=== configure EMACS to use go profiles === 

 Launch EMACS. In Emacs, visit new filew

{{{
c:\Documents and Settings\<username>\My Documents\Go-Docs
}}}

  .emacs.el

  add these lines (of LISP source code) to `.emacs.el`
{{{
;; go profile
;; (add-to-list 'load-path "c:/go/misc/emacs" t)
;; (require 'go-mode-load)
;; above was updated 20120408 with the following:

(add-to-list 'load-path "c:/go/misc/emacs" t)
(require 'go-mode-load)

(require 'compile)
(add-hook 'go-mode-hook
	  (lambda()
	    (set (make-local-variable 'compile-command)
		 (format "go build %s" (file-name-nondirectory buffer-file-name))
		 )
	    )
)



}}}

NOTE: This is LISP source code.  You don't have to know anything about LISP, its just what EMACS is made from.  IF the contextual highlighting does not display correctly later, check this and make sure you use parenthesis and not brackets.   :)

   to end: CTL-x ctl-s

   close emacs

----

=  create hello.go, make emacs run it =

From a DOS shell, navigate to your GO home source code directory

{{{
c:\Documents and Settings\<username>\My Documents\Go-Docs
}}}


create text document and name it `hello.go`

 right click on this file

Select *Open* or `open with....`  This changes after the first time



Select `Choose from a List` and  `OK`

From the Open With window, use the Browse... button to Navigate to: 

 c:\emacs\bin

 Select `runemacs.exe`

check the " always do this " checkbox. (DON'T FORGET to CHECK the CHECKBOX!!!)

 it open emacs

 close emacs, make sure emacs icon is on hello.go

 click it
  
 emacs opens the (still empty) hello.go program.

=== Create a sample GO program ===

 Use your internet browser navigate the main page for the go web site *golang.org*

 copy example program in the yellow window under "Or try it right here from your browser:"

 Paste the copied source code into the emacs window for hello.go

 ctl-y to paste

 The source code you copied should be displayed with context highlighting.  The key words should be purple, the `main` should be black, the literal text should be brown.

 In the line `fmt.Println("Hello, 世界")` replace the two Asian characters with your name, unless your name happens to be "World".

 Save the file

=== build the program (compile)  ===

 GO source can be compiled within EMACS, or from the workstation command prompt.

==== Compile within EMACS ====

 In EMACS, select  Tools - Compile...

 At the bottom of the EMACS window, the "Compile Command" command line is displayed:

 `Compile Command: make -k `

 change 
         make -k 
 to
         go build hello.go

 If successful (it takes a while on an old machine) the compilation finshed will display finished in green. 

NOTE:  There should be a way to configure EMACS default to display 

 `Compile Command: go build <currentfile>.go `

But we didn't figure it out yet.  Please send a comment for how to do this. 

In the meantime, the line `Compile Command: go build <currentfile>.go ` will persist until the EMACS window is closed.


==== Compile from command line ====

 from the dos command line Start -> Run... -> cmd

 Navigate to the Go source code directory

 enter 

` go build hello.go `

 Compilation (of hello.go) should result in the creation of the executable

`    hello.exe `

== execute ==

 Running hello.exe from the command line will run the program

` Hello, Professor Braino `

 From within EMACS, select:
     Tools -> Shell command -> (files name) -> hello

 The interactive line (at the bottom of the EMACS window) should display the program output

= Setting up the CSP channnels between GO and Propfoth =

NOT READY FOR PUBLIC DISTRIBUTION 20120328

BUT Sal sent me the prototype 20120325.  Executing this Go program sets up a connection between the DOS command line and the prop board running propforth, just like TeraTerm or and terminal program.  Why is this interesting?  

This is interesting because it uses the CSP channels.   There are a couple of benefits to this.  

 # The DOS command line features, such as command completion, command editing, and command history, nw work on the interface to propforth. This save tons of kernel space and save me months of putting off implementing this as an extension. 

 # CSP channels allow multiple connections.  The next version of the Go interface is planned to support many connections (over the same wire, the existing USB virtual serial port connection).  We will be able to have a separate session to each COG simultaneously.  

----

=  Some references =

http://forums.parallax.com/showthread.php?138412-GO-language-amp-Hoare-CSP-Channels/page2

http://forums.parallax.com/showthread.php?126589-Communicating-Sequential-Processes-by-C.A.R.-Hoare

http://www.usingcsp.com/

End of instruction 20120328-0956