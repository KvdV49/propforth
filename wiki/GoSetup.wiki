#summary Setup for GO  language using CSP channels.
#labels v5.0,cspchannels

= Introduction =

Propforth uses communication channels similar to those in CSP
http://www.usingcsp.com/

GO language also uses similar communications channels
http://golang.org/

The idea is to use the Prop for interfacing to sensors and actuators, and using a workstation to do the number crunching,  network communication, display, operator input and storage services.

The prop and the workstation interface will be the CSP communications channels between propforth and the GO language (or any other that supports communications channels) on the workstation.

= SETUP The Work Station =

The big issue is that some OS use -forward- slash (/) and some use backslash (\), this serves to screw up the path names.  This configuration aims to resolve those issues in a standard, reproducible manner. 

NOTE:  I tried to setup my rig so the data was on the G drive instead of the C drive, and it DID NOT work.  So these instructions are exactly the way Sal did it using C drive.  Now, to see if it works....

The communications channels make the device on the other end transparent.  So we want to be able to show that OS (windows, linux, Mac) ar4e equivalent, and the particular workstation (x86 PC, Mac, Raspberry Pi, ZipIt2) are functionally equivalent, and so the workstation hardware can be scaled to the task at hand. 

= Target tool chain for workstation =

The workstation tool chain will be (for now): 
 # windows XP
 # GO language
 # EMACS text editor

----

== GO Language ==

 _assuming the workstation is  windows XP_

Download the newest version of go, we used 2012-03-13.windows-386.zip

http://code.google.com/p/go/downloads/detail?name=go.weekly.2012-03-13.windows-386.zip&can=2&q=

Move Go directory to C:\go

NOTICE: When extracted to the destination directory, verify that you end up with 3,327 files in 360 folders in the go directory.  I used a older slow machine, and the extract stopped before completion for the first couple tries. 

== Windows XP ==

We're starting with windows xp since its already on a machine


Steps -


 * Control panel - system - advanced - environment variables 

 * User Variables for `<USER_NAME>` - NEW
  * New User Variable 
    * Variable name: {{{ HOME }}}
    * Must be in uppercase 
  * Variable Value: {{{   C:\Documents and Settings\<username>\My Documents\Go-Docs }}}
    * The final location can be anything you want to type all the time. We tested the names 'Go-Docs' and 'GoFiles'. Avoid names with spaces, etc. 
    * Selecting a path in `My Documents` ends up with the characteristically silly extra long path names.  But apps tend to look here by default, and in this case the path was not too long so it worked.   

 * System Variables - (existing variable) PATH - Edit 

   PATH
   edit - add this at the end of the value that is already there...
{{{
... ;c:\go\bin
}}}

 NOTES: a) There probably shouldn't be spaces in the path line, this might be why it didn't work for me using G:  b) MUST be lowercase  c) On one machine the variable was `PATH` and on another it was `Path`.  Use whatever is already there. 


 * system variables  - New
  * Variable name: {{{ GOROOT }}}  

  GOROOT must be uppercase

  * Variable Value: {{{  c:\go }}}

  MUST be lowercase

CHECK: 

From Dos shell (START > Run... > Open: *cmd* ):
{{{ 
path
echo %GOROOT%
echo %HOME%
 }}}

Must be uppercase

should reflect the changes we made

From Dos shell command line prompt type:
{{{
 go
}}}

should give go description, if so, go setup complete!

{{{
C:\Documents and Settings\user-name>GO
Go is a tool for managing Go source code.
...
}}}

So far, so good....

----

== EMACS Editor ==

EMACS was selected since it has aspects which make it compatible with (people who think in propforth) forth.   Each user is free to use an alternative editor or environment, any such alternate configurations will be posted as they are made available.

=== download emacs ===

From the EMACS page http://www.gnu.org/software/emacs/

Find Obtaining/Downloading GNU Emacs http://ftp.gnu.org/pub/gnu/emacs/windows/

The version we used is:

  http://ftp.gnu.org/pub/gnu/emacs/windows/emacs-23.3-bin-i386.zip

Copy or Move the files under `<download>\emacs-23.3-bin-i386\emacs-23.3` to a directory you create called `c:\emacs`
 

 Navigate to  c:\emacs\bin

 make shortcut to  runemacs.exe 

 move/copy this short cut to your desktop and/or quickstart-bar

 The Icon should display the EMACS logo

 Right click the EMACS shortcut, edit the properties; change Start-in directory to:  {{{
C:\Documents and Settings\<username>\My Documents\Go-Docs
}}}

 Click the EMACS shortcut to launch EMACS.  EMACS should create a sub-directory named `.emacs.d` in your {{{
C:\Documents and Settings\<username>\My Documents\Go-Docs
}}} directory.

=== configure EMACS to use go profiles === 

 Launch EMACS. In Emacs, visit new filew

{{{
c:\Documents and Settings\<username>\My Documents\Go-Docs
}}}

  .emacs.el

  add these lines (of LISP source code) to `.emacs.el`
{{{
;; go profile
(add-to-list 'load-path "c:/go/misc/emacs" t)
(require 'go-mode-load)
}}}

   to end: CTL-x ctl-s

   close emacs

----

=  create hello.go, make emacs run it =

 dos shell, goto home go dir

{{{
c:\Documents and Settings\<username>\My Documents\Go-Docs
}}}


 create text doc    hello.go

 right click

 open with....

 c:\emacs\bin

 runemacs.exe

check the " always do this " checkbox. 

 it open emacs

 close emacs, make sure emacs icon is on hello.go

 click it

 write a go program

 browse to golang.org

 copy example program   into emacs winows for hello.go

 ctl-y to paste

----

 no color or highlighting yet. This means you used BRACKETS instead of parenthesis!  Changle to paranthesis in .emacs.el as this is LISP

 close and open  - only in B&W  ?  ?  ?  Error

 syntax highlight in a second....

= compile and execute =

== compile == 

EMACS  tools - compile

in the compilation prompt at the bottom of the screen:  
change 
         make -k 
to
         go build hello.go

 - or -

from the dos command line enter 

     go build hello.go

Either options should compile the current open go source file (hello.go)
and create 

           hello.exe

== execute ==

Running hello.exe from the command line will run the program

From within EMACS, select:
     Tools -> Shell command -> (files name) -> hello

The interactive line (at the bottom of the EMACS window) should dispaly the program output

= Setting up the CSP channnels between GO and Propfoth =

(notes incomplete 20120321)

----

20120319-1533