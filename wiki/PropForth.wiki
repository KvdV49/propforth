#summary The main page forth PropForth
#labels v3.4,v4.0,Deprecated

<wiki:toc max_depth="9" />

= The main page forth PropForth =

This needs to be updated for v5.3, v5.4

  * PropForthStatus
  * [http://code.google.com/p/propforth/wiki/PropForthFAQ PropForthFAQ]
  * [http://code.google.com/p/propforth/wiki/PropForth4SetupAndTest PropForth 4]

PropForth was written specifically for the Propeller from Parallax. A really cool architecture but different enough that a forth tuned to the Propeller was necessary.

PropForth is very useful for interactive hardware and software development. It is optimized for as many free registers as possible in the cogs and reasonable performance. 

The stacks are in the cogs, and there is stack checking. The dictionary is in main memory.

There are 2 main assembler routines in [http://code.google.com/p/propforth/wiki/PropForthspin PropForth.spin]. serentryPFA and entryPFA.

serentryPFA is a serial port driver. This serial driver is started in cog 7.

entryPFA is the forth interpreter. This is the code which runs the forth words in the dictionary. On startup cog 6 is started as a forth interpreter. The boot6 word then adds another forth cog by using the cog+ word. This starts up cog 5. For a more detailed technical description see the PropForthInterpreter.

PropForth is fast enough for many tasks, it is not fast enough for all. So there is an assembler available. Easy to mix PropForth and assembler and get fast development and fast execution speed. You are pretty close to metal in this paradigm. It is easy to assume you have a high level language, but you can modify running code, and with the Propeller architecture this is a common pattern.

PropForth was developed on a Propeller proto board, 80Mhz, 512k bit (64k 8 bit EEPROM). Should be easily ported to just about any other Propeller setup.  As of version 2.5 onward it has been tested on on the standard demo board 80Mhz, 512k bit (32k 8 bit EEPROM) as well.


The terminal used is TeraTerm, but just about terminal should work. 

  * GettingStarted
  * VerifyPropforth

  * DownloadSourceText
  * DownloadPropforthSource

  * DeluxeSerialMonitor 

  * CogDebuggerDisassembler 

  * PropForthTechnicalDocumentation

  * ExampleCode

  * [http://code.google.com/p/propforth/wiki/HiResVGAJupiterACE HiResVGAJupiterACE]- A stand alone forth based development system using a VGA monitor and a keyboard connected to a Prop Demo Board

The following pages are under review:
  * SavingPropForth
  * RebuildingPropForth
  * AddingSerialMonitor