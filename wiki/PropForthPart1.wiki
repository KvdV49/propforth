#summary Additional explanation for PropforthPart1.f

= Introduction =

The file [http://code.google.com/p/propforth/w/edit/PropForthPart1 PropforthPart1.f] contains the first part of PropForth kernel, written in forth.

The second and final part is contained in [http://code.google.com/p/propforth/w/edit/PropForthPart2 PropforthPart2.f]. 

= why parts 1 & 2?  Why not one big file? =

The PropForth kernel source code is split into two parts because of the source text buffering command fl (file load)

{{{
fl
}}}

This command buffers source text in pasted into the tera term window into unused EEPROM.  There is too much text to fit into the unused EEPROM available, splitting it in two parts and processing the the source text in two passes solves this issue. 

= SomeName W@ wvariable SomeName SomeName W! =

What is this weird construct?  This appears frequently in the propforth source definition files. 

[http://code.google.com/p/propforth/w/edit/PropForthPart1 PropforthPart1.f] is the source code of the RUNNING forth.  So the definition for an existing variable SomeName must appear in the source.  (otherwise, the spinmaker word would still build it into the spin file, but we wouldn't see any source code for it.)

But in the running kernel, SomeName already has a value, and we don't necessarily know what that value is supposed to be.  But we DO know that the current vaule is correct, so we use that.

So to summarrize: 

the code

{{{
SomeName W@ wvariable SomeName SomeName W!
}}}

is really

{{{
SomeName W@        /get current the value of variable we need to define
wvariable SomeName /define the variable we need in the kernel
SomeName W!        /set the variable to the same value that it had in the previous kernel
}}}


  
}}}




= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages