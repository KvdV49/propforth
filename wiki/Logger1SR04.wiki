#summary Logger1Simple with SR04
#labels v5.5,SR04,Logger

<wiki:toc max_depth="9" />


= Introduction =

This demo adds SR04 to Logger1Simple
-----
= Step 1 - SD kernel  =

== Make the SD slot ==

I used the Spinneret standard pinout from http://code.google.com/p/propforth/wiki/SDsetupREVISITED#Spineret_%28standard%29_Pinout

Solder wires to the SD adapter.  

Connect it up per the instructions.

Put the new card in the slot.

== Load the kernel ==

From the PropForth download archive, location the SD kernel directory in the current release. 

`\My Documents\PropforthV5.5\CurrentRelease\PropForthSD`

Load the SD kernel `SDkernel.spin` using the proptool, as per normal.  

NOTE: the card will give you some error messages until you initiale it in the next step.  This is normal. 

== initialize the SD card ==

From the PropForth download archive, location the SD kernel directory in the current release. 

`\My Documents\PropforthV5.5\CurrentRelease\PropForthSD`

Load the SD initialization script sdfsInitScript.f

Simply paste this into the termianl emulator, and it does the work.  


*IF at anytime things seem to be behaving oddly, rerun this script to start over*

IT is NORMAL.  Every now and then we run a wrong something and everything gets wacked.  OK. Start over. Rerun the init script, reload the files, and it magically starts to work.  Hooray!

-----

= Step 2 - Logger 1 Simple = 

Load simple logger package found in 

http://code.google.com/p/propforth/downloads/detail?name=Logger-2013-05-12.zip

on the downloads section according to the instructions on the 

Logger1Simple  page.

NOTE: By default, logger 1 simple uses 
  * cog 0 for TIME COUNTER
  * cog 3 for LOGGER

== Double Math f ==

DoubleMath.f is the same as the default Logger1Simple download.

Paste this into the terminal emulator program first.

Use mountusr,  ls, and fread DounbleMath.f to veify the source file is in SD.
{{{
mountusr
ls
fread DoubleMath.f
}}}

DoubleMath is not displayed here. You should download the archive and open the file in a text editor.  You should copy and paste from the text editor, as doing so from this browser window can cause undefined results. 

== time f ==

Time.f is the same as the default Logger1Simple download.

In this file, we can modify line 51 to change the logging frequency.  When clkfreq is used as the logging frequency, a log file record is recorded once every second.  multiplying this by 10 records once every 10 seconds etc. 

Recall that the crystal's drift is corrected each time the time is read. In the default case, the drift is corrected every second. The drift correction is stated in term of tick per hour.  I think the drift needs to be correct once each hour at minimum, but I didn't check it.  I think the might be affected by how often the records are collected, and how big the records are. Spare, short records might need a different correction than lots of long records, even on the same board.  I think what really matters is consistent record size and logging frequency, and setting the correction case by case. 

time.f  is not displayed here. You should download the archive and open the file in a text editor.  You should copy and paste from the text editor, as doing so from this browser window can cause undefined results. 

== logger init  f ==

LoggerInit.f is a short script that creates a  50 meg file on the mountusr partition.  Recall each block is 512 bytes. 100_000 blocks is 51.2 meg.

This script MUST be run or the logge won't log anything.  It will run, but the data won't have anyplace to go. The scrip is included here to MAKE SURE YOU DON'T FORGET TO RUN IT!

{{{
mountusr
\ create a 50 Mbyte logfile
100_000 fcreate log
}}}

Use the following command to switch to the user partiion, list the directory (by default is has one file , log), and display the contents of the log.
 
{{{
mountusr 
ls 
fread log
}}}

= Step 3 SR04 =

Add the SR04 ultrasonic range finder

If you want to position the display output, you can do some crude but effective screen placement using ANSI terminal codes as shown in LittleRobotDemoUltrasonic

As always, remember:
 * SR04 needs 10k ohm resistor between echo and pin 25 (prop input pin)
 * SR04 connects to Vin (5volts)

== SR04SD f ==

SR04-SD.f sets up the SR04 driver.  It uses the same pinout as the QSbot.f program discussed in the LittleRobot demo. 

When the program loads at boot time, it automatically starts the MEASURE routine on the next free cog. 

use `cog?` to show which tasks are running on each cog. 


NOTE: This is modified from the file in the download archive.  I had to reload this a zillion times till I got it just how I wanted it.  Its fun, but sometimes you have to start over from the init script as the top of this page. Just do it, its well worth the experimentation. 



Loading the following will write the SRR04-SD.f file to memory
 
{{{
\ SR04 for SD logging

fl

10 fwrite SR04SD.f

1 wconstant build_sr04
[ifndef _sr04_trig
	d_24 wconstant _sr04_trig
]
[ifndef _sr04_echo
	d_25 wconstant _sr04_echo
]

variable _sr04_distance

: _sr04_measure
	c" MEASURE" cds W!
	4 state andnC!
	_sr04_trig pinlo _sr04_trig pinout
	_sr04_echo >m
	_sr04_trig >m
	begin
		dup _maskouthi dup dup drop _maskoutlo

		over dup dup dup

		waitpeq
		cnt COG@
		rot2

		waitpne
		cnt COG@ swap -
		d_170_000 clkfreq */
		_sr04_distance L!
		100 delms
	0 until
;

[ifdef sr04_test
: sr04_test
	begin
		_sr04_distance L@ . 
		fkey? nip
    100 delms
	until
;
]

\ c" _sr04_measure" 1 cogx
c" _sr04_measure" nfcog cogx

...


}}}

For testing, manually load the code at the end

{{{
: sr04_test
	begin
		_sr04_distance L@ . 
		fkey? nip
    
    100 delms
    
	until
;
}}}

and run the word 'sr04_test' to display the SR04 distance on the terminal display

run 
{{{ 
cog? 
}}}

to see the current task-cog assignments 


-----
= Step 4 Update usrboot.f =

Change usrboot.f to include the line to load (and launch) the SR04 driver.  For clarity, I name this file 'usrboot-SD04.f' in the source directory on the PC. 

On power cycle or reboot, run the 'cog?' command to see that driver is running:

{{{
Prop0 Cog6 ok
cog?
Cog:0  #io chan:1                     TIME COUNTER
Cog:1  #io chan:1 PropForth v5.5 2013Feb20 11:30 0
Cog:2  #io chan:1                          MEASURE
Cog:3  #io chan:1                           LOGGER
Cog:4  #io chan:1 PropForth v5.5 2013Feb20 11:30 0
Cog:5  #io chan:1 PropForth v5.5 2013Feb20 11:30 0
Cog:6  #io chan:1 PropForth v5.5 2013Feb20 11:30 0  6(0)->7(0)
Cog:7  #io chan:1                           SERIAL  7(0)->6(0)
Prop0 Cog6 ok


}}}


== Logger Boot 10 hc06 f ==

Logger boot10-HC06.f is a modified LoggerBoot.f

This loads itself onto the SD card, and create the new usrboot.f file. 

The new userboot.f file is loaded automatically at boot time. 

It set the timezone, and sets the drift correction (whoops! I didn't put that in.  It goes AFTER the fload time.f; but I haven't figured the coreection for this test rig anyway).

It loads the drivers, and starts all the tasks.

IF you HOLD DOWN the ESC key while its booting, the boot will be aborted. 

IF you wait until the scripts start loading THEN hold down the escape key, you can load all the driver, but prevent it from switching to blue tooth at the very end. See `Onreset6`.   HANDY during DEBUG.

{{{
fl

mountsys

100 fwrite usrboot.f
version W@  .cstr cr

c" usrboot.f  -  initializing~h0D~h0D" .cstr

1 sd_mount

\
\ Begin config parameters
\

\  NOTE: change to your actual time zone!

[ifndef timeZoneHours
-7 constant timeZoneHours
]
[ifndef timeZoneMinutes
0 constant timeZoneMinutes
]

\ from time.f
[ifndef doubleTimerCog
0 wconstant doubleTimerCog
]
\
\ End config parameters
\


fload DoubleMath.f
fload time.f

\ 0 setDriftCorrection \ 11_000_000 to 14_000_000 observed so far

fload SR04SD.f


lockdict wvariable logBuffer 256 allot freedict
: logdata
	getLocal Time formatTime logBuffer ccopy
\	c"  CNT REGISTER: " logBuffer cappend
\	base W@ hex cnt COG@ <# #s #> logBuffer cappend base W!
\	c"  timeStamp: " logBuffer cappend
\	base W@ decimal timeStamp <# d#s #> logBuffer cappend base W!
\	c"  unixTimeStamp: " logBuffer cappend
\	base W@ decimal unixTimeStamp <# d#s #> logBuffer cappend base W!

	c"  SR04 mm: " logBuffer cappend
	base W@ decimal _sr04_distance L@ <# #s #> logBuffer cappend base W!

	c" ~h0D" logBuffer cappend
	logBuffer
;



\ clkfreq constant logperiod \ once each second
 clkfreq 10 * constant logperiod \ once each ten seconds

\ log very second
: logger
	4 state andnC!
	c" LOGGER" cds W!
	mountusr
	cnt COG@ clkfreq +
	begin
		logperiod waitcnt
		logdata C@++ c" log" 7 lock sd_append 7 unlock
		
	0 until 
;

: ClearLog
	mountusr
	7 lock 0 c" log" sd_trunc 7 unlock
;

\ =========
\ for the HC06
\ white/orange wire - QSbot RXD to p27
27 wconstant hcRx

\ white/green wire - QSbot TXD to p26
26 wconstant hcTx
\ 9600 4/ wconstant hcBaud
230400 4/ wconstant hcBaud  \ NOW we are 230400 !!!

nfcog wconstant hcSerialCog
\ hcSerialCog cogreset 100 delms
\  c" hcRx hcTx hcBaud serial " hcSerialCog cogx 100 delms
\ ========== 


c" logger" nfcog cogx

fread .sdcardinfo

c" usrboot.f  -  DONE~h0D~h0D" .cstr

: onreset6
fkey? and fkey? and or h1B <>
if
$S_con iodis $S_con cogreset 100 delms
c" hcRx hcTx hcBaud serial" $S_con cogx 100 delms
cogid >con
\ c" _sr04_measure" 2 cogx
then
c" onreset6" (forget)
;
...

}}}

-----

The remainder is for debugging.  The autoboot scrip sets everything up; if you need to make changes section 5 and 6 talk about things to experiment with. 

-----
= Step 5 - Log the SR04 data =

After the logger and the SR04 are working, change the logger routing to log the SR04.  Add the appropriate line to the 'logdata' word as shown below, and paste the new 'LoggerBoot-SR04.f' file into the terminal.  Reboot.

Use 'ClearLog' to erase the old data from the log file.   Be sure to 'mountusr' to switch to the user partition on the SD, that is where the 'log' file resides.

{{{
: logdata
	getLocalTime formatTime logBuffer ccopy
	c"  CNT REGISTER: " logBuffer cappend
	base W@ hex cnt COG@ <# #s #> logBuffer cappend base W!
	c"  timeStamp: " logBuffer cappend
	base W@ decimal timeStamp <# d#s #> logBuffer cappend base W!
	c"  unixTimeStamp: " logBuffer cappend
	base W@ decimal unixTimeStamp <# d#s #> logBuffer cappend base W!
  
 c"  SR04 mm: "      logBuffer cappend
 base W@ decimal _sr04_distance  L@ <# #s #> logBuffer cappend base W!

	c" ~h0D" logBuffer cappend
	logBuffer
;


}}}

-----

= Step 6 - Connect via Blue tooth =

If you wish to connect wirelessly via blue tooth, it is advisable to do this last. 

After the SD kernel is shown to be working; and the logger is working, and the dirft offset has been calibrated, and the SR04 is working, and the SR04 is logging, add blue tooth suupport using the HC06.

Then past the final version of 'LoggerBoot-SR04.f' to switch the serial lines to the HC06. 

To deactivate the code that automatically switches to the blue tooth connection, comment out the code for
{{{
onreset6
}}}
in step 4 above.

-----

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages