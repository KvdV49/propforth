#labels v4.0,Riley
    Brian Riley  < brianbr [at] wulfden [dot] org >  2010 Dec 19 @ 1935 EST
*--------------------------------------------------------------------


<wiki:toc max_depth="9" />

      =Setting Up PropForth v4.0=

==Load the Basic Prop Forth Kernal==

The first part of the setup will be quite familiar to Prop people. Using your favorite IDE, Parallax's Propeller Tool (Windows only) or Brad Chamber's BST (Windows, Mac OSX, and Linux) you will load the file "PropForth.spin." And that's it for Spin. Until a new version of the kernal comes out you do not often need to use an IDE again for this board.

A quick sanity check is in order. Bring up a terminal program (suggested TeraTerm for Windows,   ZTerm for Mac OSX, ????? for Linux) Set up the program for 57600 baud. 8n1 (8 bits no parity, 1 stop bit)

Now either reset your board or power cycle it and in your terminal window you should see ...

{{{
 RESET Prop0 Cog6 ok
}}}

==Entering code into PropForth==

Our window into the PropForth v4.0 (for brevity's sake this will be called PF4 for the remainder of the document) is a modestly fast serial line and a terminal program. Using this you can type in code and run it ... this gets old really fast! There are two ways to get a file of forth code into PF4. The first is "copy and paste" into the terminal window and the second is "send paced text." Without getting bogged down extraneous details let me say simply "copy/paste" works and "send paced text" is unreliable.

There is a feature of PF4 called *FAST LOAD*. The command is "*fl*" and it should be included in the top of any code segment that you load. This causes PF4 to buffer the source text in unused RAM while another cog kicks in and parses it. This works for all sizes of code and is the preferred method for entering large blocks of code into PF4.

{{{
    fl
    
    1 2 3 4 drop . . . \ forth code
    6 7 + .            \ more code
     
}}}

==Comments In Code==


It may have occurred to you to wonder about how PF4 handles comments. Basically there are two kinds of comments in Forth, inline and block

{{{
	1 2 3 . . .      \ this is an inline comment
	4 5 6 drop . .   \ it only goes to the end of the line 
{
    This is a block
    comment and goes on as
    long as you want.
}	
}}}

  - inline comments - as soon as PF4 sees the backslash it ignores everything until the CR at the end of the line. PF4 resumes processing Forth with the next line.
 
  - block comment - is similar. PF4 upon encountering a left curly brace reads and ignores whole lines testing only for a right curly brace. PF4 resumes processing Forth with the next line.
 
  - an LF is treated like a CR and usually produces an empty PF4 prompt. It is harmless.
  
  - No RAM or EEPROM space is wasted on comments. 
  
  - You will see the PF4 responses between lines of code.
  
  - lines of code with inline comments will have finite pauses while PF4 strips the comment.

  - some of the core code written for PF4 has huge segments of block comments including huge chunks of assembler code. These can take MINUTEs for PF4 to process and giving no visible indication of progress. IT WORKS!!! Honest! If you must, LEARN HOW TO SIT ON YOUR HANDS and away from the KB and mouse! Let it finish!



==EEPROM File System==

Now, even the "copy/paste" drill gets old after awhile. But PF4 has an answer to that. PF4 has a mini EEPROM file system. The file "fs.f" contains kernal extensions for this.

The file system is based upon the target board having, at least one 24LC512 (64 KB) EEPROM ... 32K for program and 32K unallocated. The file system will start at the 32K boundry of EEPROM0 and extend up as high as the top of EEPROM7, giving 32KB plus 7 times 64KB potential code storage. As of this writing, configurations of 1 (32KB), 2 (96KB), and 3 (160KB) EEPROMs have actually been tested. Most boards have a single 64KB EEPROM and nothing needs to be done to the code to configure it. If your board has more than one EEPROM you need top open file "fs.f" in a plain text editor. In the vicinity of line 100 there is defined a constant called "*fstop*." Its value for 1 EEPROM is 10000, for 2 it's 20000, 3 is 30000, and so on. (this number is hexadecimal)

{{{
\--- from file "fs.f" ---
\
\ CONFIG PARAMETERS BEGIN
\
8000	constant	fsbot	\ the start address in eeprom for the file system
10000	constant	fstop	\ the end address in the eeprom for the file system
40	wconstant	fsps		\ a page size which works with 32kx8 & 64kx8 eeproms
							\ and should work with larger as well.
\
\ CONFIG PARAMETERS END
\
\------------------------
}}}


==Load EEPROM File System==

If you haven't already, from the prior step. find and open file "fs.f" in a plain text editor. do a "select all" and "copy." Now go to your terminal program and hit "ENTER" and see that you get another PF4 prompt. Next we are going to "paste" the contents of the file into the terminal input buffer. Keep a sharp eye out for "UNDEFINED WORD" errors. There should be none!

*Nota Bene* - When it is done, issue the command "*fsclear*." In normal operation this is used to erase all files and reinitialize the file system pointers. Here we are using it as a 'startup.' This MUST be done or bad things may happen.

Now type "*fsls*" which lists the, at the moment empty, directory and gives file space available 

At this point we have built a basic PF4 system with EEPROM file system. The code exists in RAM. If you power cycle, issue a "*reboot*" command, or hit the reset button you will lose the file system parts of the kernal. This would be the logical time to execute the "*saveforth*" command. This will write the RAM image of the kernal with the FS extensions to the lower 32KB of the first EEPROM. The command generates several lines of periods indicating the progress of the EEPROM write action. Now, a re-init of the board restores to this kernal plus fs state. (see sample below for a single 64K EEPROM Propeller Platform USB board.)

{{{
Prop0 Cog6 ok
fsclear
Prop0 Cog6 ok
fsls


8000  bytes free in files system

Prop0 Cog6 ok
saveforth
......................................................
......................................................
.........................................
Prop0 Cog6 ok
}}}


==Using the EEPROM File System==

Now the "copy/paste" routine will be your primary method for entering Forth code (usually from files with names ending in ".f") But even that gets old after awhile. Let us look at the "*fswrite*" command.

{{{
     fl
     
     fswrite propforth.f
     
     \ all the propforth code goes here

     ... 
}}}

"*fswrite*" takes everything following that line down to a line with three periods and a CR and writes it into an EEPROM file named "propforth.f". The companion command to retrieve the file and use it is "*fsload*." The code is retrieved from EEPROM and fed to the input processor, but, much faster (the comments have already been cleaned!


{{{
Prop0 Cog6 ok
fsls

008000 002272 propforth.f
00A280 000E7A LogicAnalyzer.f
00B140 0020CE asm.f
00D240 000D0F norom.f

2080  bytes free in files system

Prop0 Cog6 ok
fsload LogicAnalyzer.f

Prop0 Cog0 ok
hex
Prop0 Cog0 ok

Prop0 Cog0 ok
1 wconstant build_LogicAnalyzer
Prop0 Cog0 ok

\ and so on for the entire source of LogicAnalyzer.f
  
}}}


==EEPROM File System Management==

First, let us summarize the commands


 * *fsclear* - used to startup or wipe and reinitialize the FS

 * *fsls* - lists the contents of the FS and displays the number of bytes remaining
  
 * *fswrite* - reads in and writes file to the FS
  
 * *fsload* - reads file from the FS and puts it into PF4 in RAM
  
 * *fsdrop* - removes the file most recently entered
  

 - the "*fswrite*" and "*fsload*" filename specifications are case-sensitive. A mistype in "*fsload*" is a no-find which simply returns an empty PF4 prompt and no error message
 
 - "*fsload*" commands may be embedded within source files. I suggest you examine "comnorom.f"
 
 {{{
 \--- from file "conoroom.f" ---
 
 fl

\ After getting norom, and com working the 2 together
\
\ load this file
\ run 0 onboot
\ 5 0 term

fswrite comnorom.f

hex

1 wconstant  build_comnorom

fsload com.f
fsload norom.f


: _ob onboot ;
: onboot
(more code)
 
 ...
 
 }}}
 
 
 - For example, in the file system below you decided that you needed to replace "comnorom.f" . You could issue an "*fsclear*" and start completely over, OR, issue "*fsdrop*" twice, removing, first "snet.f", then "comnorom.f". Then you redo "*fswrite*" for the new copy of "comnorom.f" and then "*fswrite*" for "snet.f" .
  
{{{
  Prop0 Cog6 ok
fsls

008000 002272 propforth.f
00A280 000E7A LogicAnalyzer.f
00B140 0020CE asm.f
00D240 000D0F norom.f
00DF80 001426 com.f
00F3C0 000221 comnorom.f
00F600 000112 snet.f

8C0  bytes free in files system

Prop0 Cog6 ok
fsdrop
Prop0 Cog6 ok
fsls

008000 002272 propforth.f
00A280 000E7A LogicAnalyzer.f
00B140 0020CE asm.f
00D240 000D0F norom.f
00DF80 001426 com.f
00F3C0 000221 comnorom.f

A00  bytes free in files system

Prop0 Cog6 ok
fsdrop
Prop0 Cog6 ok
fsls

008000 002272 propforth.f
00A280 000E7A LogicAnalyzer.f
00B140 0020CE asm.f
00D240 000D0F norom.f
00DF80 001426 com.f

C40  bytes free in files system

Prop0 Cog6 ok

 (reload files)
 
  Prop0 Cog6 ok
fsls

008000 002272 propforth.f
00A280 000E7A LogicAnalyzer.f
00B140 0020CE asm.f
00D240 000D0F norom.f
00DF80 001426 com.f
00F3C0 000221 comnorom.f
00F600 000112 snet.f

8C0  bytes free in files system

Prop0 Cog6 ok
 
}}}

==EEPROM File System - Caveats and Gotchas==

 * there is very little error checking

 * as stated earlier "*fsload filename.ext*", if file does not exist, PF4 simply returns doing nothing

 * if you have $0840 bytes available and you do an "*fswrite filename.ext*" and the file is going to occupy more than $0840 bytes, _bad things will happen_ , usually requiring at the very least a "*reboot*" or a hard-reset. The damage to the file system can usually be fixed by one or two "*fsdrop*"s.

 * a bug in "*fsload*" (issue #22) has that if a file has been written across a 64K EEPROM boundary a "*fsload*"of that file will fail. *Workaround* - carefully place files into the EEPROM FS such that you have just less than $100 bytes free. Then write a $100 byte file and name it something like "no_use.f" and then go on and add files beyond the boundary as you please


==Exploring the Reference Setup==

If you chose to build up all or parts of the reference platform mentioned in the other documentation, you will want to setup your board with the following files;

{{{
  Prop0 Cog6 ok
fsls

008000 002272 propforth.f
00A280 000E7A LogicAnalyzer.f
00B140 0020CE asm.f
00D240 000D0F norom.f
00DF80 001426 com.f
00F3C0 000221 comnorom.f
00F600 000112 snet.f

8C0  bytes free in files system

Prop0 Cog6 ok
 
}}}