#summary Notes from Rick on Go Setup.
#labels Gochannels,linux,OLPC,v5.0,MCS

<wiki:toc max_depth="9" />

= Go channels set up for Linux =

Thing about Linux is there are a lot of ways the various installs can be different.  Rick got his it run just fine on a standard PC install. Braino is having some issues with the Fedora version on the OLPC XO. 

This page is to collect all the steps specific to Linux, to determine what goes wrong in the Fedora install. 

= Linux instructions =

These are the notes distilled from the items referenced below 

 == steps from post 57 ==

Speaking of Linux, I go things running there without major effort or problems.

 # I skipped over all the emacs stuff. I use GEDIT with a termial tab at the bottom.
 # Install the new Go package as instructed by the folks at golang.org (I ended up putting my Go in /opt/go)
 #  I downloaded the mygo.zip from the PropForth downloads and unzipped it into my code directory (/home/rapost/code/go)
 #  I updated my .bashrc as follows:
{{{
export GOROOT=/opt/go
export GOPATH=/home/rapost/code/go:/home/rapost/code/go/mygo 
}}}  
 # at this point, I bounced out of and back into terminal to get all my settings how I wanted them
 #  cd to my code directory /code/go/mygo and was able to run goterm and gomuxterm without problems.
 #  I know, please write it up for the wiki (*got this covered!*)

   === Questions ===

 * GEDIT : How to set up a terminal tab in the bottom 
 * GEDIT : How to add GO (the extension .go) into the list of program source?
 * GEDIT : Or do we use C highlighting, how to associate .go with that?
   
  under preferences -> Plugins -> Active Plugins checked the box for External Tools.  Under Configure Plugin I see Build, Open Terminal (Do I go in here everry time I need a terminal, or is there a way to get this in the menu?) Remove trailing spaces, Run Command.

Opening Run Command -> Applicability [...] brought up a language selection window, and the XO froze.  The mouse moves and the seconds on the clock update, but no other response. Could not shut down, removed battery. 

  === Answers ===

 * GEDIT Terminal Tab

After checking box for External Tools (and a forced restart in my case),  the Tools Menu has the option "External Tools".  This contains options Build, Open Terminal Here, Remove Trailing Spaces, Run command. 

Checking the "Run Command -> Applicability [...]" issue again, the same thing happened.  This time, I tried the power button, this put the XO into sleep mode.  When it came back up, it was still in the "mouse and clock only" state. 

Holding the power button for several seconds got a full shutdown, restart came up working with no windows o applications running. 

Note to self -  don't try "Run Command -> Applicability [...]" till its fixed. 

   * GEDIT : Adding GO .go extension to list of identifed languages

   * GEDIT : go context highlighting

  === Summary ===

{{{
export GOROOT=/opt/go 
export GOPATH=/home/rapost/code/go:/home/rapost/code/go/mygo 
}}}

GOROOT=/opt/go ; this is directory where GO was INSTALLED

GOPATH=/home/rapost/code/go:/home/rapost/code/go/mygo 
; the first GOPATH is your home directory for your go source code, 
; the second GOPATH is to the mygo directory containing the 
; propforth MCS/go channel interface support package

on ubuntu, braino used

{{{ 
export PATH=$PATH:/usr/local/go/bin:/home/braino/Documents/mygo/bin
export GOPATH=/usr/local/go:/home/braino/Documents/mygo
}}}

GO is installed at /usr/local/go
the location of my source code is at /home/braino/Documents/mygo

-----

 == steps from post 80 ==

using OLPC XO, which linux 386 fedora.

Install is to 
/usr/local/go 
per the instructions at http://golang.org/doc/install

Code is at 
{{{
/home/oplc/Code/Gocode 
}}}
(per your example, which makes more sense than the instruction I posted)
This has the bin, pkg, and src from the mygo download.

The instructions indicate that only the PATH needs to be set so in .bashrc I have:
{{{
export PATH=$PATH:/usr/local/go/bin
export GOPATH=/usr/local/go/:/home/oplc/Code/Gocode
}}}
the environment variable from "go env"
{{{
GOROOT="/usr/local/go"
}}}
Hello.go will compile and run, but

"go install goterm"

gives the message
{{{
# runtime/cgo
exec gcc: exeec: "gcc": executable file not found in $PATH
}}}
I tried including various paths in HOME, PATH, GOROOT, and GOPATH, but no luck, and I'm just hacking now.

   === Questions ===

Do we need PATH set for Go in Linux?
What does PATH need to be set to? 
Is GOROOT set automatically?
What other environment variables need to be set, are they set automatically?

Does Go need GCC?
Does the error message say the GCC is NOT installed?

   ==== Answers ====

-----

 == steps from post 83 ==
My go env gives this:
{{{
[rapost@C3PO go]$ go env
GOROOT="/opt/go"
GOBIN=""
GOARCH="amd64"
GOCHAR="6"
GOOS="linux"
GOEXE=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOTOOLDIR="/opt/go/pkg/tool/linux_amd64"
GOGCCFLAGS="-g -O2 -fPIC -m64 -pthread"
CGO_ENABLED="1"
}}}
If I do "which gcc", I get this:
{{{
[rapost@C3PO go]$ which gcc
/usr/bin/gcc
}}}
If I do "which gccgo", I get this:
{{{
[rapost@C3PO go]$ which gccgo
/usr/bin/gccgo
}}}
I'm trying to find out if there's a way to get a verbose listing of the install to see what's actually happening.

It's strange that the simple program works but something in the more complex fails. 
   === Questions ===
   ==== Answers ====
-----
 == steps from post 87 ==

@PB

If I remember correctly, I just unpacked (untarred?), the release package into /opt/go and set the paths. Nothing beyond that other than setting up the env variables.

I'm not sure if gcc and gccgo play a part. From what I was reading, they shouldn't but your error message might indicate otherwise. I was looking through golang-nut mailing list for any clues last night and didn't see anything.

Can you go to the directory where the source file is: /home/rapost/code/go/src/goterm in my case and then try

go run goterm.go

I think this will run the program directly without tryning to do all the package stuff. If you still get an error, then we probably need to look at your install or see if you need gcc. A simple go program that used a go routine might be interesting to try. It appears that while go doesn't have a byte code interpreter or virtual machine to contend with, there is a runtime wrapper of sorts that goes around the program (you're not directly executing your code on the hardware). I'm wondering if the simple hello.go program doesn't cause the runtime to try something that the more complicated (go routines) goterm program causes to happen. Whenever you do that thing - BOOM!

The $3.03 Kindle book on Go programming was pretty helpful reading last night until my iPad hit me in the face when I finally dozed off. It has some language issues (grammar and such) but the content seems to be spot on.

The Way to Go: A Thorough Introduction to the Go Programming Language

Still working the issue as time permits. What a great way to learn!! 

   === Questions ===
   ==== Answers ====
-----


 == steps from post 89 ==
Prof B. I think we cross posted - back up a couple and this one make more sense.

Simple program using go routines. I put this into a file name goroutines.go in /code/go/src/goroutines

Code:
{{{
package main

import (
    "fmt"
    "time"
)

func simulateEvent(name string, timeInSecs time.Duration) { 
    // sleep for a while to simulate time consumed by event
    fmt.Println("Started ", name, ": Should take", timeInSecs, "seconds.")
    time.Sleep(time.Duration(timeInSecs * 1e9))
    fmt.Println("Finished ", name)
}

func main() {
    go simulateEvent("100m sprint", 10) //start 100m sprint, it should take 10 seconds
    go simulateEvent("Long jump", 6) //start long jump, it should take 6 seconds
    go simulateEvent("High jump", 3) //start high jump, it should take 3 seconds

    //so that the program doesn't exit here, we make the program wait here for a while
    time.Sleep(time.Duration(12 * 1e9))
}
}}}
from inside that directory, you can do "go run goroutines.go"

from outside that directory, you can do "go install goroutines"

Code:
{{{
[rapost@C3PO code]$ goroutines
Started  100m sprint : Should take 10ns seconds.
Started  Long jump : Should take 6ns seconds.
Started  High jump : Should take 3ns seconds.
Finished  High jump
Finished  Long jump
Finished  100m sprint
}}}
You should see output like the above.
(ignore the 'ns seconds' - something funky in the example.)

If this works, we'll need to dig into goterm.go and see what it does that's different.

I hope we can get this working for you....go is starting to grow on me! 
   === Questions ===
   ==== Answers ====
-----
 == steps from post 93 ==
PB, it sounds like the GO compiler doesn't like something in your source file. I think that message is basically, "I got to line 2, column 1 and didn't find the keyword package." This sounds like a cut/paste format problem copying the source to the linux box.

It complains differently if it can't find the packages to import.

If your GOROOT points to the correct directory (where you installed it), GO should be able to find everything.

I pretty sure go is a standalone package....but I can't test that since all of my Linux boxes (even the BeagleBone) have gcc installed as part of the distribution.

We'll get thsi figured out somehow! 
   === Questions ===
   ==== Answers ====
-----


= References =

  == general Go Setup instructions ==

These are in addition to the regular Go setup notes http://code.google.com/p/propforth/wiki/GoSetup20120511

and the original (deprecated) notes 
http://code.google.com/p/propforth/wiki/GoSetup20120422

These are on a separate page as there still may be issues in the instructions.  

 == Forum Posts ==

These notes are constructed from the notes in the propforth thread on the parallax forums

Post 57 - Rick's summary of linux steps - http://forums.parallax.com/showthread.php?138399-Propforth-5.0-is-available-for-download&p=1093022&viewfull=1#post1093022

post 80 - Fedora OLPC XO issues - http://forums.parallax.com/showthread.php?138399-Propforth-5.0-is-available-for-download&p=1100989&viewfull=1#post1100989

Post 83 - env variables - http://forums.parallax.com/showthread.php?138399-Propforth-5.0-is-available-for-download&p=1101476&viewfull=1#post1101476


Post 88 - env variables - http://forums.parallax.com/showthread.php?138399-Propforth-5.0-is-available-for-download&p=1101590&viewfull=1#post1101590

Post 89 - Test subroutine execution - http://forums.parallax.com/showthread.php?138399-Propforth-5.0-is-available-for-download&p=1101626&viewfull=1#post1101626

Post 93 - error message -  http://forums.parallax.com/showthread.php?138399-Propforth-5.0-is-available-for-download&p=1101986&viewfull=1#post1101986

= End = 

end of notes 20120602 