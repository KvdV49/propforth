#summary The Code Review experiments for Propforth - 20110102 SD support
#labels SD,v4.0,Phase-Implementation

 == This review has not been started 20110102 ==
 == The review invitation has not been sent 20110102 ==
 == Review Package is being prepared 20110102 ==


= SD support =

Contributor caskaz considered the most capable regular contributor to propforth. He began working with forth around release 2.6, less than a year ago.  After implementing drivers for his NEC LCD screen, he decided to implement SD support for propforth. 
This is a non-trivial task. Depending on how far it is taken, it can lead to full FAT32 support.  Kye worked his SD driver in PASM and SPIN for a year before posting http://forums.parallax.com/showthread.php?122991-SD2.0-Full-FAT32-16-File-Sytem-Driver-You-there!-Yes-you-viewing-this-forum. So SD support in forth may take a bit of work, but doing it is the best way to learn what is going on.

`Prof_Braino` copied the body of CodeReview101 and edited it for SD.  This will be the standard method for setting up a code review until a better option is available.   Let me know if I should add or remove anything.  

= Guidelines and Rules =

Please follow these guidelines and rules for code review.  If any guidelines or rules should be added, changed, or removed, please inform the team.  These rules and guidelines are intended to reflect the consensus of the team.

 == Rules =  

Can:  

 Reviewers can ask for clarification on intent of any piece of code under review
 
 Reviewers can identify issues for other pieces of code (and trigger an new review on that code)

 Reviewers can state "I don't understand" or "I don't get it"  for any piece of code

 Reviewers can submit constructive criticism on any topic. "I do that differently, have you considered ...."

 Reviewers can disagree with the author implementation of the work.  "I don't think this will work, there will be a divide by zero in this case"

 Reviewers can disagree with the author documentation of the work.  "These comments are too much/too little for the complexity of this function,  please consider...."

 Author can accept or reject groups input at author's discretion.  Typically, the author makes the changes suggested by the groups (if this person asks for this, others probably will have a similar request). 

 Reviewers that have additional changes not implemented by the author are free to make any changes in their own private branch of the code.  These will not necessarily be included in the main Propforth packages.  (Examples are Hive and C3 branches).

Cannot:

 Participants cannot behave inappropriately

 == Guidelines ==

Guidelines for the code review process:

 Leader is `prof_braino`, `caskaz` the author prefers conduct the discussion in Japanese, and we don't have the translator working yet. 

 Leader has requested code review and author has agreed.

 Leader is preparing a review package with author (described below)

 Leader will call the review when package is ready

 Leader will invite participants 
 
 Leader will negotiate and arrange times, dead lines so there is sufficient time to prepare.

 Participants commit to participate by accepting the review invitation 

 Participants prepare by reading the materials in advance of the review
 
 Participants prepare by writing questions about the materials in advance of the review

 Participants prepare by sending list of questions to Leader/Author in advance of the agreed upon deadline.  (i.e. "We'll get questions back to you by Tuesday")

Any reviews that do not adhere to these guidelines should be noted,  and the guidelines should be updated to describe what actually needs to happen.   

= Code Review Preparation =

The difference between a code review and "just looking at another person's code" is that there are specific steps that we try to do.  We don't always have to do all of these steps, but this list should reflect what we actually do; so point out things that are should be changed (review this review instruction).

 # To prepare for code review, the leader make a package that includes all materials needed for the review. 
 # The leader invites reviewer and schedules the start and end of the review (by getting agreement from the attendees).  
 # The attendees read the materials, and ask questions and make comments.  
 # The attendees return their questions and comments to the author.  
 # The team discusses the questions and comments.  
 # The team determines whether or not each given questions or comment requires a change to be made to the materials (the reviewers do NOT hash out the actual fix to a given issue, the meeting would take too long. All issues are sorted out off-line, after the meeting). 
 # After the meeting the author arranges for the changes to be made (does them or gets someone else to do them).  This is done by a specific deadline, usually two days or whatever we decide, to make sure we don't have unresolved reviews hanging around.
 # When the changes are complete, the author notified the team to check the changes
 # The team checks that the changes address the intent of the original question/comment, to ensure no issues are unresolved
 # The team notified the author that the changes are all complete
 # The author posts the new version that includes all changes and works to all members expectations.
 
There are several "deadlines"  mentioned above.  These are not scary. Each task only task a short amount of time, but there are several tasks that must happen in sequence. It is important that participants agree to do there part in the allotted time, or the review will never end.  All tasks and deadlines are agree to by consensus of the team members; it something inconvenient simply mention it to the leader/author and a change will be made. 

= The Code Review Package = 

The code review package defines the complete set of items needed to perform the review.  In this case, we assume that each participant has the following or equivalent: a PC, an internet connection, a propeller chip, propeller tool Rx.x, PropforthV4.x.zip, and some understanding or willingness to learn FORTH. 

 * The Leader/Author prepares the review package.
 * The Review package contains the items needed for the review as determined by the team.  
 * Typically the review package consists of:

 # The code under review
 # A statement of the function of the code
 # Prerequisites
 # Supporting references
 # Inputs
 # Processing
 # Outputs
 # Results/Side affects

-----
 === Review Package for Code Review of SD Support ===

Prerequisites: Hardware and software

 * SDSC card - 1 Gig
 * SDHC card - 4 Gig
 * SD slot hardware configured as indicated in the review package
 * Propchip with 4 I/O pins free,  preferably 0, 1, 2, 3 so anyone with a demoboard may participate
 * Propforth v4.0x (in this case Propforth.spin is identical in Propforth4.0 and Propforth4.0a so either can be used)

  No addition hardware or software is identified

Supporting References: SD functional definition

  <TBD>

Code: 

  <TBD - caskaz is creating a zip archive that will be posted>

Setup:

  * User sets up test configuration of Prop, SD slot, and SD card
  * User load the SD support code in the order specified 

Inputs:  

  * User configures SD card to contain the various arrangements of directories and files as indicated 
  * User issues various commands as indicated

Processing:

 * Prop requests SD card information, SD card reads the information and presents it to the prop 
 * Prop requests SD card to save information, SD card writes the information and presents results to the prop 

Outputs:

 * Prop presents SD card outputs to the user display screen

Results/Side affects:

 * SD data is displayed on the terminal display
 * User data is stored on the SD card

-----
 === Review Schedule for Code Review of SD Support ===

 * Code Review for SD Support invitation *

Invitation will be by email.  Reply to email (within the allotted time?  How about 1 day from the invitation notification email?) to accept. 

Requested participants
 * *Required*  `prof_braino`
 * *Required*  `caskaz`
 * *Required*  `BrianRiley`
 * _Optional_  `salsanci`
 * _Optional_  `Ron Sutcliffe` (if Ron is interested I would like to make him a required participant)
 * _optional_  `any other interested parties`  


NOTE: After the initial review,  any person can continue to ask questions on the code under review and receive answers.  This is how new participants can be brought up to speed on the various sections of code.

Please respond indicating if 1 week is too little or too much to perform you part of the review.

Please prepare by reading the review materials by [1 week from last response]. It encouraged to respond earlier than the deadline.  The default time period is adjusted according to the experience, availability and timeliness of the participants.

Please prepare by submitting review questions to the Review Lead No Later than the Deadline date.   It encouraged to respond earlier than the deadline.  The default time period is adjusted according to the experience, availability and timeliness of the participants.

-----
 === Review Responses for Code Review of SD support ===

*Code Review for SD Support invitation*

`     Requested participants -------- RESPONSE` 

 * *Required*  `prof_braino: ---- Will participate 2011-Jan-02`
 * *Required*  `caskaz: --------- Will participate, caskaz is constructing a ZIP file with the SD code for review.
 * *Required*  `BrianRiley: ----- <not yet>`
 * _Optional_  `salsanci: -------- Sorry, out of town`
 * _Optional_  `Ron Sutcliffe: ---- <not yet>`
 * _optional_  `any other interested parties`:  

-----

 === Review Responses for Code Review of SD support ===

*Code Review QUESTIONS for SD support *


   <none submitted yet> 

---- 

 === Review Results for Code Review of SD Support ===

*Code Review for SD Support - Review Results


Please provide comments:
 * at the bottom of the page
 * by email
 * by anyother method

----

== Final Phase: Post Review == 

   Review comments received:  <not yet>
   Review comments actioned:  <not yet>
   Review actions  complete:  <not yet>
   Review actions  accepted:  <not yet>

Note:  "Review actions  accepted" means the person that made the original comment is happy with the result, and feels no further work is needed for the original point.

Please use this review as the reference on the material under review. 

Questions about this material may be submitted after review is complete. If you have a question, ask it. Other folks have the same question, and everybody can benefit from the answer if it gets posted.