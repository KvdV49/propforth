#summary a single session 4 hour workshop for intro to embedded control systems
#labels LittleRobot,Workshop,v5.5

<wiki:toc max_depth="9" />

= !LittleRobot(tm) Workshop =

!LittleRobot(tm) Workshop is a single 4 hour session.  This presents the intro to embedded control systems material.  This session uses the Parallax Propeller microcontroller, the !LittleRobot(tm) kit, and a PC.  

The goal is to have participants assemble the kits and the expected result is a mobile roboitc platform that moves and can sensor the environment in a simple fashion.

= The !LittleRobot Project =

The !LittleRobot project is the DEMO for !PropForth v5.5

The intent is to provide a lowest cost "starter" option to embedded control systems (robots).  

If the experience is positive, participants are encouraged to upgrade to more capable parts, create giant robots, and take over the world, etc, as desired. 

= Preparation =

Required for the event are:

   * Internet Access
   * Electrical Power
   * sufficient workspace (two seats per participant)
   * LittleRobot(tm) kits
   * Parallax Propeller Quickstart board (or equivalent)
   * Optional: Bluetooth device:
     * Blue tooth equipped PC or Laptop
     * Blue tooth equipped smartphone
     * Bluetooth equipped tablet

The bluetooth connection is for wireless communication with the LittleRobot.  The Bluetooth equipped device must be capabile of running a Bluetooth terminal application as descripbed below in "software".

----

= SOFTWARE =
 
User must have permissions to install the required software and drivers on the PC.

== Propforth ==

The primary software tool for this project is !PropForth. 

!PropForth is an implementation of the FORTH language and development environment for the Parallax Propeller micro controller. Please location the downloadable archive for propforth on the sites download section at:

http://code.google.com/p/propforth/downloads/detail?name=PropForth-V5.5-20130317.zip


== PC OS ==
  
A suitable PC operating system must be loaded. Current options are Windows, Mac, and Linux.  Participants are responsible for familliarity fwith their operationing system of choice. 

=== Windows ===

The primary choice is  Windows XP.  Other version of windows also work. 
The software required for windows systems are:
    * Proptool v1.3.2 (link)

http://www.parallax.com/Portals/0/Downloads/sw/propeller/Setup-Propeller-Tool-v1.3.2.zip

http://www.parallax.com/tabid/832/default.aspx

    * Teraterm 4.77 or higher (link)

http://en.sourceforge.jp/projects/ttssh2/downloads/58915/teraterm-4.78.exe/

http://en.wikipedia.org/wiki/Tera_Term    

=== Mac OS ===
 
Mac OSX is recommended for Mac users.  Other version may work but have not been tested.
     * Brad's Spin Tool (link)

Note: Brad's Spin Tool bst) is not supported.  BST will be replaced by simpleIDE which is currently in beta.

     * Cool_term (link) [replaced with a more suitable option]


=== Linux ===

Ubuntu 12.04 is recommended for Linux users.  Linux users are required to know how to "get it working" on there own system.  Typically, anyone that uses linux is able to do this. Minimal support for linux operating system will be provided. 

    * SimpleIDE (beta)

NOTE: simpleIDE is in beta and is not yet supported.  Use it as a beta user at your own descretion.

http://forums.parallax.com/showthread.php/137928-PropGCC-SimpleIDE

http://code.google.com/p/propgcc/downloads/list

http://learn.parallax.com/propeller-c-set-simpleide

https://sites.google.com/site/propellergcc/documentation/simpleide

    * minicon (link)

https://help.ubuntu.com/community/Minicom

http://en.wikipedia.org/wiki/Minicom


== Android ==

Android 3.0 or higher devices can be used.  The android device MUST have bluetooth support to be used with the wireless bluetooth interface described here. 

To use the wireless communication on an android device, and suitable bluetooth terminal program is needed.  

BlueTerm is the recommend android bluetooth terminal application. Blueterm is available via the App store. The user is responsible for installing  the bluetooth application on the android device of choice. 

* blueterm 


https://play.google.com/store/apps/details?id=es.pymasde.blueterm

== IOS ==

*IOS DEVICES ARE NOT SUPPORTED*

To use the wireless communication on an IOS device, and suitable bluetooth terminal program is needed.  

At this time, NO COMPATIBLE IOS BLUETOOTH SOLUTION IS KNOWN.  Certain hardware exists that MAY function, but the cost is greater than the entire rest of the project.  

(none specified) is the recommend IOS bluetooth terminal application. (none specified) is available via the App store. The user is responsible for installing  the bluetooth application on the IOS device of choice. 

----

= SETUP =

Install the PC software per your operating system as described above. The installation process will install teh proper drivers for connecting the Prop Quickstart. 

== INSTALL PROPTOOL ==

In this document, Proptool specifically refers to Proptool v1.3.2 on Windows XP.  Unless otherswise notes the same instruction is to be applied to Brads Spin Tool (BST) on the Mac, and SimpleIDE (BETA) on linux.

Installing Proptool (and BST, and SimpleIDE) will also install the requireed USB to serial driver needed for communicationg with the Quickstart via USB Cable

== Install the TERMINAL Program ==

In this document,  "terminal program" refers to Teraterm on Windows, Cool Term on Mac, and Minicom on Linux. 

Install the software per the included instructions for each. 

=== PC or Laptop ===

On a Bluetooth equipped PC or laptop, the previously installed terminal program is sufficient. 

Teraterm, Cool_term, and Minicom all see the Bluetooth connection and treat is as "just another serial port".  Handy!

=== smart phone ===



----

= The !LittleRobot(tm) KIT =

The !LittleRobot(tm) KIT is designed to be the lowest cost set of parts that can provide a complete, functional, mobile robotic development platform. For background see here:  CheapestPossibleRobot

== !LittleRobot PARTS-ONLY Kit (without micro controler) BOM ==

The KIT is a set of parts to be added to a micro controller. The COST of the basic kit does not include the micro controller, as many micro controller options exist, and this project is designed for maximum flexibility. 

Participants can obtain these on there own (search EBAY for suppliers from China, that's what we do) if there are participating independently; or the pre assembled kits can be obtained through the workshop for a nominal mark up. Because of our volume purchases we can generally get you a better price than you can on your own, and we do all the work for you, so the kits are most convenient all the way around. 

The Bill of Materials (BOM)  is the list of parts needed.  This list is intended to be the complete set. It is a living list, and is updated as we discover better options.  The current stat as of this writing is:
 
  * SR04 Ultrasonic Range Finder
  * HC05/HC06 Bluetooth serial cable replacement
  * (2) mini stepper motor
  * (2) ULN2003 stepper motor driver
  * USB Host to mini-B 5 conductor cable
  * Jumper WIRES
    * 20 M-F
    * 1 F-F
  * Battery PACK (4*AA), with wires and ON/OFF switch
  * Batteries (4*AA)
  * (2) Wheels 
  * (2) rubber bands (to provide traction for the wheels)
  * Velcro
  * (10) #4 machine screws, 1 inch
  * painter's tape (Blue or green)
  * DUCT tape
  

We don't specifically need the Duct tape or painters tape, but life is easier when these are handy, so we keep them for luck. 

== LittleRobot Microcontroler ==

The document will secify the Parallax Propeller Quick start. This can be purchased locally for under $35, or directly from parallax for $25 + shipping. 

= Tools = 

The project is designed to require NO TOOLS.  

 
----

= The ACTIVITIES =

Prerequisites:
  * The PC is set up
  * PC software is installed
  * the serial drivers were successfully installed
  * the PC is connected to the internet and you are reading this page :)
  

# connect the Quickstart to the PC
# load the devkernel.spin to the Quickstart EEprom
# connect to Propforth with the terminal program

== Hello World - serial text driver ==


{{{

: greet  cr cr ." Hello Robotics Engineer! " cr cr ;

greet 

}}}

== Blinky LED - PIO driver ==


=== On OFF ===

{{{

16 pin out
1000 delms
16 pinhi
1000 delms
16 pinlo
1000 pinin


}}}

=== Sequence - Loops ===

{{{

: Outs  8 0 do i  16 + pinout i . loop ;

1000 delms 

: forward 8 0 do 
                 i 16 + pinhi 200 delms 
                 i 16 + dup . pinlo 200 delms
               loop 
;

forward

3000 delms 

: reverse  8 0 do 
                 23 i - pinhi 200 delms 
                 23 i - dup . pinlo 200 delms
               loop 
;

reverse 

5000 delms

forward reverse forward reverse
forward forward forward forward 
 reverse reverse reverse reverse
forward reverse forward reverse
forward reverse forward reverse

}}}

== Stepper driver ==

http://code.google.com/p/propforth/wiki/LittleRobotDemoSteppers

== Range finder driver ==

http://code.google.com/p/propforth/wiki/LittleRobotDemoUltrasonic

== blue tooth driver ==

http://code.google.com/p/propforth/wiki/LittleRobotBluetooth

http://code.google.com/p/propforth/wiki/LittleRobotBluetoothHC05

http://code.google.com/p/propforth/wiki/LittleRobotBluetoothHC06

----

= Build Robot Chassis =

Follow notes here

http://code.google.com/p/propforth/wiki/LittleRobotChassis

----

= BOT.F =

Now that all the parts have been deomnstrated to function, the completed robot can operate. 

The bot.f program is included in the propforthv5.5 download archive.  This is the initial example to be used as reference only.  We are to make our own program, andwe are free to use what ever pin configuration and devices we choose. 

For the present purpose, we will use 

QSbot.f

which is a version of bot.f tailored to the Quickstart board.

== Pin Configuration ==

see the pin configuration section on this page

~~http://code.google.com/p/propforth/wiki/LittleRobotDemoProgram~~

http://code.google.com/p/propforth/wiki/LittleRobotQSbotProgram

=== QSbot versus BOT1 & BOT2 ===

QSbot is the hardware configuration we will use as the example in this session.  Bot1 and Bot2 are two more possible configuration, these are the ones Sal used during development of the LittleRobot.  We thought we would be using custom hardware at the time, since then we have determined that QSbot is the simplest method for our needs. 

== EEprom.spin ==

The LittleRobot uses the EEpom version of the propforth kernel.  This is the same development kernel, with support for using the built in EEprom as a simple file storage system.  

The EEpropm files system kernel is located in you extracted download directory at:

../PropForth-V5.5-20130317/V5.5/CurrentRelease/PropForthEEprom

EEpromKernel.spin

Use the proptool application on the PC to load EEpromKernel.spin firmware onto the Quickstart board.

Verify the propforth command propmpt respomndes.

Procede to the QSbot program. 

http://code.google.com/p/propforth/wiki/LittleRobotQSbotProgram

-----

= ADVANCED =

ADVANCED users may wish to use Nick Lordi's Robot Control Language. 

----

== ROBOT CONTROL LANGUAGE ==

Nick Lordi's Robot control language

http://code.google.com/p/propforth/wiki/LittleRobotNickLordiRobotControlLanguage



----

== ADVANCED - GREEN ==

http://code.google.com/p/propforth/wiki/AndroidGREEN

This is a development app and not supported as a final user app. Expreiment with Green and give us feedback, so we can develop a proper, final app. 

Green is an "unsigned" android app, that is, the user takes full responsibility for installing and usng this app. 

You have to be able to install and unsigned android app to use Green.apk. 

== LittleRobot Microcontroller ==

While the basic kit does not specific the micro controller, this project does requires a specific microcontroller, this being the Parallax Propeller, in particular the Propeller Quickstart board.  This was selected for maximum bang for the buck and because it the the most fun in my opinion. 

= Notes =

Voltage regulator and a second resistor (for the voltage divider) could be for the upgraded model, if we ever get that far.  as it is, we can only keep the price under $50 by volume buying. Even with out regulator, ( and certainly not with  LiPo and charger)  I don't think the price limit can be met by a one-off purchase, even directly from the cheapest source for each part from china. 

The plan is to follow through with at least one iteration per the original constraints:

 * No tools are required. (no soldering, no way to connect the regulator)
 * No parts beyond what's in the box (can't even get something from the workbench, we're at the client site) 
 * cost has to be under $50, including mark up for shipping and handling etc. (folks complain even this is too high)
 * participants must be able to assemble and test the entire bot in under 2 hours, 
 * must not require instructor to "do magic" on the boards (skilled operation like soldering, special programming, etc)
 * must allow the last two hours for intro to programming

if there is enough interest to justify an upgrade, I would definitely pursue a properly designed and assembled board. 

Again the goals is to allow the kids to make a START.  They should be able to decide "this X is crap, I want to upgrade"

The goal of this experiment is to see if we can find who interested and who's not, with risk to the least resources.   Parents MIGHT risk $50 on Billy's bot project, but event the rich families have trouble risking more than that on some stranger's untried odd-ball scheme. 


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages