#summary PropForth v5.3 notes 20120817
#labels v5.3

= Introduction =

[PropForth] Version 5.3 is the culmination of the development experiments conducted since version 2.4 

PF 5.3 may represent the final kernel configuration.  It supports optimization, generation of alternate arbitrary kernels,  automated build/rebuild of the kernel(s), and automated regression testing. 
We don't think anything else needs to change at this point, and most new development can be built on top of this. Unless we find some egregious bugs, this should be the final form of the propforth kernel.

= Differences = 

There are some slight differences in this release package.

The release package now looks like it will be in the form of mygo.zip

This release is built to interface to other systems, using Go channel interfaces, similar to Propforth's  MCS (multichannel synchronous serial). 

== Go Language Interface ==

The Go language provide tools and support so the workstaiton can talk directly to the prop at the application level.  

The Prop now sees it has workstation assets available to it.  

The workstation now sees that it has software configurable I/O attached to various sensors and actuators. 

The intention is to use this distributed parallel multi-processor approach to do cool experiments with robots and embedded systems.  Maybe.

NOTE - Do not attempt to use the Go Language interface unless you intend to do cool stuff with robots and embedded systems.  It might not be suitable for any other purpose, we just don't know yet. 

= Setting up the Go Language =

The Go language provide the PC interface to the automated test tools.  Using the Go Language is optional.

== Go Is Optional ==

Users that do not wish to user the automation may select any directory or directory name to contain the propforth materials. 

== But try it anyway ==

Set up the Go language per the instructions for your operating system. 

http://code.google.com/p/propforth/wiki/GoSetup20120511

Fix that link, it is old

= Go Language Directory =

MyGo is the directory for Go Language source code and executables.

Please NOTE - the GO interface is VERY POWERFUL.  You can do amazing and dangerous stuff with this. 


= STEPS =

Assuming Go is now set up, here are the steps to run propforth

= MyGo.zip =

MyGo.zip is the download archive containing the propforth material.  This is a zip of the MyGo directory. On windows, this is usually

{{{
C:\Documents and Settings\<user>\My Documents\MyGo
}}}

rename any previous MyGo directory and replace it with the MyGo directory from the archive. 

Find the README file in each directory, and follow the instructions.  Each README is specific to that directory, so you may have to read more than on, depending on what you are doing. 

= Hardware = 

Connect a Quickstart of other prop borad to the workstaion using a USB virtual serial port of other suitable connection. 

= Software =  

== FORTH ONLY == 

If you sue PropForth only (No Go Language tools, (coward!):

 * Select the desired PRopforth.sspin source file (USUALLY) 
{{{
PropForthDevFastSerialKernel.spin (if no SD support is required)

PropForthSDFastSerialKernel.spin (if SD support is required)
}}}
 * Use the proptool to load the spin program to EEPROM

 * Begin forthing around

== FORTH + GO ==

Alternatively, if you with to use the FULL POWER of the package:

- Install GO (as done above)

- copy the new MyGo directory from the release to the GoFiles directory as before

- run the gosheell.bat script, it sets up stuff and leave a command line window open. 

- In the open command line winodw:

  - cd to V5.3

  - cd to kernels

  - execute the maketest.bat script to see the entire automation suite run

The maketest.bat script will MAKE all the kernels from source, and execute the entire regression suite on all the kernels.


== Users are encourage to use the automation for their own projects ==

- Create applications as desired

- Create TESTS FOR EVERY CHANGE and FUNCTION you add

- ADD you tests to the regression suite

- Run the REGRESSION SUITE after EVERY CHANGE (since its fast and automated)

- Rest assured the EVERY function runs exactly as you intend, every time, since you tested everything

- Combine the power of your Workstation with the power of your embedded applications using the Go channels communication infrastructure

- Do great things and become famous

Smile :)

= Summary =

The functionality that has been developed over the last several years has been optimized in v5.0.  One design element has been the ability for user to generate custom kernels optimized for any arbitrary set of hardware. Testing became problematic as new kernels requireed new tests, and the new material caused test time to exced development time.   

Automation was planned testing and introduced in this last cycle.  Now, developers can add tests on the fly as they develop; once debugged, the tests can be directly add to the regression suite.  An change that results in a deviation in an unrelated part of the code (one of the most difficult bugs to track) is immediately apparent, as the last change will most likely be related to the deviation.  The build process is also automted, any kernel that can be built from an existing kernel can be added to the build process automation.

Version 5.3 adds automated build process and regression testing. Any user can follow the regression test for an example of the correct use and function of each element of propforth.  Hopefully this will shed light on all but the darkest secrets of propforth.  An items still unclear can be addressed in the wiki pages and future tutorials.  We appreciate community support in pointing thes items out, by asking question.  We and the community will attempt to address these questions as they are presented. 

= End PropForth V5.3 Notes 20120817 =