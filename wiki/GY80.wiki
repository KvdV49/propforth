#summary GY-80 IMU. I2C

<wiki:toc max_depth="9" />

= GY-80 Inertial Measurement unit =

The GY-80 is a very inexpensive 10DOF inertial measurement unit.

I got mine off Ebay for about $50, it was insanely cheap at the time.  Now they are going for about $14.  Be aware that these might be rejects or in some way defective.  They still work and are fun to play with, and are fine for experimentation purposes.  

There are newer parts on the market that are more capable and possibly cheaper.  Some have upgraded versions of these parts, so potentially there are drop-in replacements and the same code works.  CHECK THE DATA SHEET, as always!

= Uses =

IMU is handy for meausuring changes in speed and position (inertia).  If we know speed and direction, we can determine our position in relation to a known point, such as our starting point.  If we have no other information, we can call this "dead reckoning" or "deduced reckoning".

We can use this for Robo-Magellan, or Quad Copter navigation and control. 

NOTE:  GPS is separate from this IMU, we can add GPS later. 

= GY-80 sensors =

The parts are 
 * ADXL345 accelerometer
 * BMP085 barometric pressure sensor
 * HMC5883L magnetometer (Compass)
 * L3G4200D gyroscope

The accelerometer, gyroscope, and magnetometer all are 3 axis. 

 * [ADXL345]
 * [BMP085]
 * [HMC5883L]
 * [L3G4200D]

= GY80 Application = 

The GY80 can be organized as several parts.

 * the low level drivers for the four sensors
 * the initialization of the sensors at power up
 * ANSI terminal support for the terminal (android device) character base user interface (UI)
 * The terminal interface display
 * The display support for each sensor data
 * The real time click support
 * the Data Logger

The program code was developed in the order presented above.  Each item was completed before moving on to the next item in the lost.  When a new item was completed, the previous items were checked, to ensure new code did not disrupt existing code.  Also new discoveries (a better way to do something) were applied to the old code, and the changes were retested in the same manner. 

The result of the method is we go over the first part a zillion time, because the first part is re-checked after any new part is integrated. Even so there is still room for improvements. Some functions could be standardized across all parts. Some functions where standardization was attempted should NOT be standardized, maybe, because the part is "just different". You are free to make any changes and offer suggestions if you are pleased with the result. 


= I2C =

The GY-80 uses  [I2C] bus  to talk with the microprocessor.  There are actually FOUR I2C bus parts on the GY-80. The use the same [I2C] wires and commands that we already se to talk to the EEPROM, so support is already built into the kernel for  free. Neet!

I2C is expalined in detail elsewhere. PropForth has built-in support for the EEPROM, so I2C "just works".  But we still have to understand I2C a bit to grasp whats going on in the drivers. 


= GY80 driver =

The individual drivers are combined into a single module.

One cog tends all I2C bus devices, the foreground cog displys the sensor output as simple text.

== Simple ==

Just display the data values 

Forth source code for GY-80 simple dirver

[https://drive.google.com/file/d/0B8d8RsrY7Rt-dmQyellLcGVrQzQ/edit?usp=sharing Gy-80 driver - simple]

Cog 7 runs the terminal serial driver 
Cog 6 is the user command line
Cog 5 loaded the code, now is is idle and available
Cog 4 was the next free cog during load, and is assigned reading the I2C bus to query the sensors. 

The remaining cogs are available

The devices are being read at the speed of the I2C bus (400Khz) 

The display is being updated at 230400 baud.  I believe the display is only showing a portion of the data, because the data is updated faster than the display is receiving. 

== Graph ==

Display with a retro ANSI character graphics display (IN PROGRESS)

== Logging ==

Log to SD

== Logger with Graphics ==

Log to SD also display the graph on terminal screen (including Android over Bluetooth)


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages