#summary Outline for testing PF5.2.1BETA GoMuxTerm.
#labels v5.2.1BETA

= Introduction =

PropForth v5.2.1 BETA was sent to team members and various frequent users. We want folks to beat on this, particularly the serial connections, to see if they hold up or show any differences from what we expect.  We hope they will be identical to previous behavior, with the addition of having many channels instead of just one.  

The serial channels don't have any particular regression test suite, as the serial channel is the most basic communication and is assumed to be working in the first place. So the best way to test changes to the serial channel is just to start using it.  Sal didn't see any smoke, but we will only know for sure when users put it through its paces and determine that its the same of different. 

= Requested Tests = 

Sal would like to get some throughput data on the various configurations on the various rigs that people use. The BETA has a Test menu that we can access using 
{{{
control C
}}}
from the command prompt.  We can launch some loop back and throughput tests, and collect the numbers to see if they look like we expect. 

= Set up =

NOTE: This only applies to BETA testers with PF v5.2.1BETA.  If you want to try the BETA (its fast and fun!) email me or post to the parallax boards or PM me and I'll email you a copy. 

  == Set up PF v5.2.1BETA ==

 * Unpack the archive to your hardrive as usual
 * Using PropTool load the kernel to you propboard Unit Under Test (UIT)
{{{
\propforth\Propforth-V.5.2.1-20120519\CurrentRelease\PropForth\PropForthDevFastSerialKernel.spin
}}}

Verify you can get a SERIAL connection to `COG6` using Telnet as usual, your comport, 230400 baud.  Notice the executing `words` is REALLY fast now!

Close the TeraTerm comport session after you know the prop is loaded and working.

NOTE: If you try to make a TELNET connection at this pint, you will get a `connection refused` message, as `gomuxterm` is not running yet. 

  == Setup new version of 'gomuxterm' ==

This uses the same installation of 20120420mygo.zip, with a new `/src` directory.

In your `mygo` directory (i.e. C:\Documents and Settings\Boss\My Documents\GoFiles\mygo),

RENAME the `src` directory to something like `src.old`

 * unpack the new `2012May19-mygo.src.zip`
 * copy the `/src` directory to your `mygo` directory
 * enter the /src directory 
 * make the /src/serial directoy contains the correct file for your OS (windows is default)

 From a Windows command prompt, recompile goterm and gomuxterm

 * Start-> Run -> cmd
 * cd C:\Documents and Settings\Boss\My Documents\GoFiles\mygo
 * run the goshell.bat script
 * recompile goterm and gomuxterm

{{{
go install goterm
go install gomuxterm
}}}

NOTE: If you get the message 
{{{
can't load package: package goterm: import "goterm": cannot find package
}}}

it means that goshell.bat was not executed, and the go environment has not been set up.  Check that goshell.bat is being run

 == New parameter for goterm and gomuxterm  ==

OK, goterm has the same parameters as before.  Check it still works but running goshell.bat and using

`goterm com5 230400`

You should see that go term permit command history functions provided by the os. 

Now try gomuxterm.  The parameter string has changed to include the number of channels (8, 16, 32, and possibly 4) and a flag for debug mode, 0 is OFF

`gomuxterm com5 230400 8 3000 4000 0`

Notice that we used 8 for the number of channels. The request for testing is to try the different values 8, 16, 32 (and 4 if it works) on your machine. 

You should see:
{{{
C:\Documents and Settings\Boss\My Documents\GoFiles\mygo>gomuxterm com4 230400 8 3000 4000 0
Using 1 CPUs

Rebooting propeller, try 1
Sending constant definitions:

d_6 wconstant _MX_BSHIFT
d_64 wconstant _MX_BSIZE
d_63 wconstant _MX_BMASK
d_8 wconstant _MX_NUM_CHAN
d_32 wconstant _MX_BUF_OFFSET

Sending code...
Sending start command... Waiting for sync
Starting serial multiplexer
Listening on 127.0.0.1:3000
Listening on 192.168.0.248:3000
Listening on 127.0.0.1:4000
Listening on 192.168.0.248:4000
}}}

 == Whats going on (short version) ==

COG6 is listening to gomuxterm, and go muxterm is listeming to port 4000.

COG6 is using 1K of COG RAM as a buffer for 8 channels (channel 0 through channel 7) using TCP/IP port 4000

 = Running the Tests =

testing session example:

Use `CONTROL C` to start the test routine

{{{
CONTROL PANEL
h       - prints help
?       - print status
q       - disconnect

nn c    - connects to channel nn as a telnet connection (CTL-c will invoke CONTROL PANEL)

n1 n2 s - run a loopback speed test on channel n1 for n2 bytes -- 4 <= n1 <= 8, 100 <= n2 <= 10000

n1 n2 t - run a send speed test on channel n1 for n2 bytes (data from prop) --  0 <= n1 <= 3, 100 <= n2 <= 10000

n1 n2 u - run a receive speed test on channel n1 for n2 bytes (data to prop) --  0 <= n1 <= 3, 100 <= n2 <= 10000
}}}

  === Check the S command works ===

Run 5000 iterations of the LOOPBACK speed test on one channel (example channel 6) using command `s`

{{{
6 5000 s
Mux Channel 06  Loop Chars/sec: 2000.00
}}}

  === Run a multi channel test: ===

Run 5000 iteration of the LOOPBACK speed test on channels 4, 5, 6, and 7 at the same time

{{{
4 5000 s 5 5000 s 6 5000 s 7 5000 s
Mux Channel 07  Loop Chars/sec: 1523.81
Mux Channel 06  Loop Chars/sec: 1523.81
Mux Channel 04  Loop Chars/sec: 1523.81
Mux Channel 05  Loop Chars/sec: 1523.81
}}}

   === Check the T command works ===

Run 5000 iteration of the send test on channel 0 using the `t` command

{{{
0 5000 t
Mux Channel 00 Send Chars/sec 3333.33
}}}

  === Run a multiuchannel send test T ===

Run 5000 iteration of the send data speed test on channels 0, 1, 2, and 3 at the same time using the `t` command

{{{
0 5000 t 1 5000 t 2 5000 t 3 5000 t
Mux Channel 01 Send Chars/sec 2758.62
Mux Channel 00 Send Chars/sec 2735.04
Mux Channel 03 Send Chars/sec 2711.86
Mux Channel 02 Send Chars/sec 2666.67
}}}

   === Check the U command works ===

Run 5000 iteration of the send test on channel 0 using the `u` command

{{{
0 5000 u
Mux Channel 00 Send Chars/sec 3333.33
}}}

  === Run a multi channel recive test U ===

Run 5000 iteration of the recieve data speed test on channels 0, 1, 2, and 3 at the same time using the `u` command

{{{
0 5000 u 1 5000 u 2 5000 u 3 5000 u
Mux Channel 03  Rec Chars/sec 2000.00
Mux Channel 01  Rec Chars/sec 2000.00
Mux Channel 00  Rec Chars/sec 1987.58
Mux Channel 02  Rec Chars/sec 1987.58
}}}

  === Do the send and receive tests together ===

Run the send and receive tests at the same time

{{{
0 5000 t 1 5000 t 2 5000 t 3 5000 t 4 5000 s 5 5000 s 6 5000 s 7 5000 s
Mux Channel 07  Loop Chars/sec: 1461.19
Mux Channel 05  Loop Chars/sec: 1447.96
Mux Channel 04  Loop Chars/sec: 1447.96
Mux Channel 06  Loop Chars/sec: 1447.96
Mux Channel 00 Send Chars/sec 1649.48
Mux Channel 01 Send Chars/sec 1649.48
Mux Channel 02 Send Chars/sec 1624.37
Mux Channel 03 Send Chars/sec 1624.37
}}}

 = collecting data =

Please coolect the following data:
 * Number of CPU on the workstation
 * CPU speed in Ghz if possible (1.6 Ghz, 4.0Ghx, etc)
 * type of workstation (desktop, laptop, netbook)

*From the gomuxterm window get the number of CPUs:

{{{
C:\Documents and Settings\Boss\My Documents\GoFiles\mygo>gomuxterm com4 230400 8 3000 4000 0
Using 1 CPUs

Rebooting propeller, try 1
Sending constant definitions:

d_6 wconstant _MX_BSHIFT
d_64 wconstant _MX_BSIZE
d_63 wconstant _MX_BMASK
d_8 wconstant _MX_NUM_CHAN
d_32 wconstant _MX_BUF_OFFSET 

}}}

*From the Propforth command prompt session:

 * capture of the test command and output as above.

 * summary if anything looks different than expected.

So far we expect the buffer and the number of CPU's or affect the results.  More CPU's will be faster, and few number of channels will be faster.  

 - Doubling the number of channels (using the same workstation)  should decrease the throughput by 5%

 - Doubling the number of CPUs (ie using different workstation)  should increase throughput by 30%


 = delivering the data = 

Users can create results page on the wiki, or email the file  to me or Sal. 

Folks that don't have wiki 'create' access can email to me. 

 -- in progress 20120521 --