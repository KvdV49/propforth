#summary Download Text files containing FORTH source code
#labels v3.2

= Introduction =

The FORTH dictionary can be extended by adding new definitions.  The entire system, including the new definitions, can be saved to EEPROM.  The extended system is thus available after reboot. 

= Extending the Forth Dictionary =

Definitions can be entered using the command line for example

*: test 7 0 do i . loop ;*

The word test has been defined and can be executed by typing the word at the command line:

*test*

_0 1 2 3 4 5 6 Cog6 ok_

Propforth is configured by default to use 57.6 baud no parity no stop bits, no flow control.   This is suitable for much interactive mode activity, as most folks will not type fast enough to choke the serial line.  (let us know if you find exceptions to this generalization). The user may type in forth words for execution including compilation words, allowing new forth colon definitions to be entered into the dictionary. 

However, there is a compilation delay as definition is committed to the dictionary. 

The result is that if one pastes an entire page of definitions into the teraterm window, after a bit the interpreter starts missing characters. This, of course results in various problems. 

= The FL word (FileLoad) =

The FL word is actually lower case up to and including version 3.2, it is in uppercase in the title so the lowercase 'L' is not confused with the number '1'.  In the code it appears thus:

{{{
fl
}}}

This word appears in most of the "forthsourcefile.f" files as the first executable word. 

(Note to Self - The FL word should be renamed FileLoad,  do this next version)

(Note back to self - sorry bucko, missed this one in v3.2. Add a change request and try for next release)

The FL word provides the method for loading entire files of source text definitions into propforth.

FL loads a file of forth source text to propforth.

The FL word reads the input stream and page-writes it into unused EEPROM as a buffer. 

It uses the EEPROM starting at 256 bytes past the current end of the dictionary, and ending at 32k.
 
When the input stream is exhausted, propforth interprets the input stream as buffered in EEPROM, and the text is echoed on the serial terminal display.  

As each section of the buffer is interpreted (for example, as it is echoed on the screen), the EEPROM is released from the buffer duty.

The demo board was tested to accept over 15,000 characters, and the proto board slightly less.

NOTE: If the capacity of the EEPROM is exceeded, the message "Out of memory" displayed, and the board must be rebooted or re-flashed.  

Steps for use:

   1) power cycle or execute the reboot word to ensure no residual errors are present.

   2) Place the FL word at the begining of the source text file to be loaded.  FL has a couple blank line before and after it for formatiing, so it is easier to spot in the file. 

*fl*

< many line of forth source code in text format >

   highlight the entire source text file contents including the FL at the begining (i.e ctl+A), copy and paste it into the teraterm window.

   The FL will display for several seconds, and the blue LED  on the Demo board USB/COM port will flicker, indicating that the transfer is underway. After a bit the FL word will display the HEX number of character recieved as in: 

*FL*

_C3F chars_

_Cog6 Ok_

The tera termininal display will begin displaying the source text pasted in interspersed with 

_Cog6 OK_

   between each successful definition.  

   Visually verify that the final line displayed on the tera term screen is the final line of the source text file, and is followed by 

_Cog6 Ok_

_Cog6 Ok_

   At this point, the file was successfully loaded and compiled.

   See the example for downloading the textfile Propforth.f to propforth via teraterm:

[http://code.google.com/p/propforth/wiki/DownloadPropforthSource DownloadPropforth.f]