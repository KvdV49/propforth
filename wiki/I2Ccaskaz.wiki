#summary Caskaz is a master of I2C, and PropFORTH

= Introduction =

Caskaz gets lots of parts to play with. He writes drivers for them in PropFORTH. Usually he publishes them in the Parallax forum threads, for example

http://forums.parallax.com/showthread.php/146693-Propforth-v5.5-is-available-for-download/page22

Lately he has been quite prolific, so I will try to collect his work in one place, here.  So we can find the driver for the part we are looking for. 

He tends to update the code often, any team member can please edit this page, in case I get behind.

He has a couple different types of work:

  * Device Driver code
  * Utilites
  * applications

= Device drivers =

  * BH1750FVI_20140316 light sensor
  * KT0913 AMFM reciever on a chip
  * WS2812 NeoPixelRing
  * UG-2832HSWEG02 OLED display(128X32) driver Controller:SSD1306
  * Wii Nunchuk	
  * WS2812  intelligent control LED
  * MPU6050 23 axis gyro

 == BH1750FVI_20140316 light sensor == 

{{{
fl

{
Ambient Light Sensor (BH1750FVI)
      
PropForth 5.5
2014/03/16 21:08:10

 BH1750FVI module    Propeller
          Vcc   ----  3.3V
          SCL   ----  SCL
          SDA   ----  SDA
          ADDR  ----  GND
          GND   ----  GND 
}

\ =========================================================================== 
\ Constants 
\ =========================================================================== 
\ Slave addres h23 for BH1750FVI (ADDR:GND) 
h46 wconstant BH1750FVI

\ Command
0 wconstant PD           \ Power Down
1 wconstant PO           \ Power On
7 wconstant Reset        \ Reset
h10 wconstant cont_HR    \ Continuous Hi-Resolution Mode
h11 wconstant cont_HR2   \ Continuous Hi-Resolution Mode2 
h13 wconstant cont_LR    \ Continuous Lo-Resolution Mode
h20 wconstant single_HR  \ Single Hi-Resolution Mode
h21 wconstant single_HR2 \ Single Hi-Resolution Mode2
h23 wconstant single_LR  \ Single Lo-Resolution Mode

d9600000 constant 120msec
d1280000 constant 16msec

\ =========================================================================== 
\ Variables 
\ =========================================================================== 
variable time

\ =========================================================================== 
\ Main 
\ =========================================================================== 

\ Write Format for BH1750FVI
\ ( n1 -- t/f )  n1:Command t/f:true if there was an error  
: wr_BH1750FVI
\ Start I2C 
_eestart
\ Write slave address[wr], then receive Acknowledge-bit(ACK:Lo  NACK:Hi) 
BH1750FVI _eewrite                 \ ( n1 t/f )
\ Write command                   
swap _eewrite or                   \ ( t/f )
\ Stop I2C
_eestop
;

\ Read Format for BH1750FVI
\ ( -- n1 t/f )     n1:16bits  t/f:true if there was an error
: rd_BH1750FVI
\ Start I2C 
_eestart
\ Write slave address[rd], then receive Acknowledge-bit(ACK:Lo  NACK:Hi) 
BH1750FVI 1 or _eewrite            \ ( t/f )
0 _eeread                          \ ( t/f Hi-byte )
-1 _eeread                         \ ( t/f Hi-byte Lo-byte )
\ Stop I2C
_eestop
swap 8 lshift or swap              \ ( 16bits t/f ) 
;

\ Power Down
\ ( -- )
: PowerDown PD wr_BH1750FVI err? ;

\ Power On
\ ( -- )
: PowerOn PO wr_BH1750FVI err? ;

\ RESET
\ ( -- )
: RESET Reset wr_BH1750FVI err? ;


\ Measure on continuous-mode [cont_HR, cont_HR2, cont_LR]
\ ( n -- )  n:continuous-mode command
: cont_mode
PowerOn
dup
\ Set 24msec(Lo-Res) or 180msec(Hi-Res) to time
2 and 0=        
if 120msec else 16msec then time L!
wr_BH1750FVI                  \ Issue command
err?  
time L@ cnt COG@ +                                                  
begin
     rd_BH1750FVI
     err?
     . cr
     time L@ waitcnt          \ Wait until data updating
     fkey? swap drop
until
drop
;

\  Measure on single-mode [single_HR, single_HR2, single_LR]
\ ( n1 -- )   n1:single-mode command
: single_mode
dup                           \ ( n1 n1 )
PowerOn
wr_BH1750FVI                  \ Issue command   ( n1 t/f )
err?                          \ ( n1 )
2 and 0=        
if d120 else d16 then delms
rd_BH1750FVI 
err?
. cr
;


}}}

 ==  KT0913 AMFM reciever on a chip == 


 ==  WS2812 NeoPixelRing == 
 ==  UG-2832HSWEG02 OLED display(128X32) driver Controller:SSD1306 == 
 ==  Wii Nunchuk == 
 ==  WS2812  intelligent control LED == 
 ==  MPU6050 23 axis gyro == 

= Utilities =



= applications =

  * USB Current monitor

==  USB Current monitor ==

Amp_offset
{{{

fl

{
Get offset(Amp1 and Amp2) for USB-Current-Monitor-II
PropForth5.5

MCD3204
           Din    ----  P0    
           CS     ----  P1
           CLK    ----  P2
           Dout   ----  P3    
         
2014/02/23 21:23:19
}

\ ==================================================================
\ ADC
\ ================================================================== 
\ MCP3204
0 wconstant _do               \ connect to MCP3204's Din         
1 wconstant _cs         
2 wconstant _clk          
3 wconstant _di               \ connect to MCP3204's Dout
1 _di lshift constant _dim

: _cs_l _cs pinlo ;
: _cs_h _cs pinhi ;
: _do_l _do pinlo ;
: _do_h _do pinhi ;
: _clk_l _clk pinlo ;
: _clk_h _clk pinhi ;

\ Convert analog[0-3.3V] to digital[0-4095] 
\ single-end input for MCP3204
\ ( n1 -- n2 )   n1:channel [0 - 3]  n2:data
: get_a/d    
_cs_l  
\ Output control-bits       
h18 or                        \ Add start-bit and single-bit
h10
5 0 do 
     2dup                     \ ( n1+h18 h10 n1+h18 h10 )      
     and 0> 
     if _do_h then
     _clk_h _clk_l 
     1 rshift 
     _do_l           
loop
2drop                                  
_clk_h _clk_l                 \ dummy clock

\ Read conversion-data   
0                             \ initial value
d13 0 do 
     1 lshift
     _clk_h  _clk_l
     ina COG@ _dim and 0> 
     if 1+ then       
loop     
1 rshift
_cs_h
;

\ Get offset for ch0/ch1
\ Set 10mV befor executing this word
\ Amp1 10mV X 33 = 0.33V(410digits)
\ Amp2 10mV x 16 = 0.16V(199digits)
\ ( -- )
: get_offset
\ Set pins for ADC to output
_do pinout _cs pinout _clk pinout

\ ch0
0 d100 0 do 0 get_a/d + d50 delms loop 
d100 u/                      
d410 - negate                                      
." ch0_offset:" . cr
\ ch1
0 d100 0 do 1 get_a/d + d50 delms loop  
d100 u/                       
d199 - negate 
." ch1_offset:" . cr
;


}}}
*had to stop for dinner*


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages