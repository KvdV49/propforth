#summary LAC is the software logic analyzer in propforth
#labels v5.5,Quickstart,LAC,logicanalyzer

= Logic Analyzer  =

This a a supplement for `PropForth-V5.5-20130317.zip/V5.5/doc/PROPFORTH.HTM` section 5 !LogicAnalyzer

Logic Analyzer reports the pin states, hi or low, for a specific time after a specific event.  This handy for real time control, where timing is critical. A logic analyzer is like very fancy expensive oscilloscope.  LAC is a little cheaper, and can be just as effective.

LAC is a software program that uses one or more cogs to report the state of the prop pins form a given time for a certain duration.  

The sampling period can be triggered by pin transition, or by an operator event. 

The forth script lac.f is located at `PropForth-V5.5-20130317.zip/V5.5/CurrentRelease/Extensions/lac.f`

= Setup =

Summary: Load the propforth kernel, load the lac.f extension.

== PC - Windos XP ==

Install and launch the Proptool

Connect the Quickstart to the PC with a USB cable

After the device is registered, Use F7 to ensure the USB COM port is found.

== Load a kernel ==

use the prop tool to open

`PropForth-V5.5-20130317.zip/V5.5/CurrentRelease\CurrentRelease\PropForth\` 
`DevKernel.spin`

Use F11 to compile and load the kernel into EEPROM

== Load lac.f ==

in your text editor, open
`PropForth-V5.5-20130317.zip/V5.5/CurrentRelease/Extensions/lac.f`

highlight the entire contents of the file `(CTL^A)`

copy it `(CTL^C)`

paste it into the teraterm window with the propforth command line (right mouse)

== save image to EEprom ==

Use saveforth to save the current dictionary image (which now inclides LAC) to EEprom

{{{
Prop0 Cog6 ok
saveforth
}}}

response will be
{{{
.............................................................................................................................................
Prop0 Cog6 ok
}}}

When the prop is power cycled or rebooted, the LAC definitions will still be present.

== To Remove LAC ==

To get rid of LAC, use forget build_LogicAnalyzer and do saveforth again, or simple reburn devkernel.spin using proptool.   For now, leave lac in EEprom, as we will reboot several times during the investigation. 

= Using LAC =

Read `PropForth-V5.5-20130317.zip/V5.5/doc/PROPFORTH.HTM` section 5 !LogicAnalyzer

== LAC commands ==

NOTE:  You can issue invalid command sequences to LAC.  There is no particular error checking on command input, it will perform what ever command(s) you issue. This makes it very powerful, but also easy to screw up.  It is the operators responsibility to issue correct commands.  If something goes wrong or starts acting strange, just reboot.  Typically, we reboot quite often during the investigation and development phase,  don't be afraid to reboot often. 

=== Trigger Pin      -q    +Q: 0 ===

LAC will look at this pin (can be 0 to 31) for a transition.  The transition will start the sampling process. 

Pressing `q` will decrement the pin number

Pressing `Q` will increment the pin number

This field has limits of 0 and 31.   It also can display `NONE` after the SPACE key is pressed. 

If the trigger pin displays as NONE and will not increment or decrement, restart lac. (LAC has to be small to fit in with an application, changing this would increase dicationary foot print, and would cost a lot of memory space)


===  Trigger Edge -w +W SPACE ===

This is for rising edge, fall edge, or NONE. 

`w`  lowercase w selects rising edge.  Start collecting the sample when the pin transitions from LOW to high.  Used when a pin is changing at some frequency

`W` uppcase W selects falling edge.  Start collectiong the sample whem the pin transitions from HIGH to low.  Used when a pin is changing at some frequency

SPACE selects NONE.  Just start collecting the sample when the ENTER key is pressed.  Used when the pin is changing from a manual or other external non frequency event. 

----------

= UNDER CONSTRUCTION FROM HERE =

Do the examples:







The following assumes you have already completed the examples in section 5

== load an application (Quickstart touch demo) ==

  * In teraterm, run the `reboot` word to return to the original kernel state.
  * Download the Quickstart Touch button demo 
  * http://propforth.googlecode.com/files/QuickstartTouchDemo20120611-1540.txt
  * Open it in your text editor
  * highlight the entire contents of `QuickstartTouchDemo20120611-1540.txt`
  * copy th4 highlighted text with `(ctl^C)`
  * paste it into teraterm 
  * do saveforth (to write the the touch button demo to EEprom)

NOTE: After your programs are loaded, you can do a saveforth to save the current dictionary image to eeprom. This way, the same image will persist after reboots and power cycling.   

NOTE:  You can load lac first, or you can load quickstart demo first. you can do saveforth after loading either to write the current image to EEPROM.

== load lac.f after application ==

Make sure the quickstart touch demo is present and running. 

Load LAC into propforth as described above.

== set triggers ==

set the trigger as the transition of one ot the buttons (pin 0-7) or for one of the LEDs (pins 16-23)

First try button pins, then try LED pins, etc

== set the sampling ==

by default, LAC will sample xxxx bye at frequency xxxx

The touch demo runs at xxx refreshes (line xx in touch demo)

Set the sampling such that the touch and release event can be captured, for example nnnn

== execute application ==

Since the touch demo is set to run on reboot or power cycle, the demo should already be running. 

touching the button that you have set as trigger (or that triggers the LED you have set as trigger) should cause LAC to capture a sample

== monitor application ==

Notice that the buttons and LEDs are refreshed at a rate of 22 ms (line xx in touch demo)

Touching the trigger pin should capture a sample. In addition, the states of all other pins are displayed.  You should be able to see the transitions of any pins touched during sampling.  Experiment with change the sample window till you can capture various samples ass you touch different buttons.

= ok =

= TRIGGER with < ENTER > =

By default, LAC triggers when you press the enter key

Run LAC

hit enter, and see the display get drawn.  If it scrolls of the bottom, adjust you window size. The output has a line for each I/O line, a command header, and intermediate headers for the I/O lines display. .   

The display window needs at least 63 lines to full display with out scrolling.

OPTIONALLY we can edit the LAC code to remove some intermediate headers to reduce the out put display size.  (do this later.

Touch various quckstart pads to light LEDs.

Hit enter to see the LAC i/o lines dispay change to reflect the states of the pads (on pin 0-7) and the LEDS (on pin 16-23)

== change sample frequency to a LONG interval ==

The default sample frequency is 40 clocks per cycle. When triggered, LAC samples at this rate until the buffer (free memory) is filled. 

Change the sample frequency using the `ASDFG` keys (caps) to increase the sample time delta (by 1, 10, 100, 1000, 10000 cycles, respectively); and using the asdfg keys (lowercase) to decrease the sample time delta (by 1, 10, 100, 1000, 10000 cycles, respectively)

touch pads and resample to see changes

Notice is you set the sample rate to 40,000 cycles (G,G,G,G) this is about the highest it can go. It takes a long time (almost 2 seconds) to sample and display.  You can LIGHTLY lay your finger across several pad on the quickstart, some some of the LEDs flicker dimly. The sample will show the I/O lines toggling for the flickering LEDs. 

=== change the sample frequency to a short interval ===

The shortest sampling period we do with the default configuration is 40 cycles. 

NOTICE that you can set the sample frequency down to 1 cycle. BY DEFAULT, the lowest we can go is 40 cycles, this uses 1 cog to do the sample, and save the data to free hub memory.  It can't function reliably any faster in this configuration.

By changing the configuration in LAC, we have TWO more options:

  * use more cogs to sample faster, capture to HUB memory
  * use a single cog and sample VERY FAST, capture to COG memory.  The cog memory captures are much smaller.  But in this case we tend to be looking at very fast events, so this is enough.  (If its not use the other method, of course)

Setting the different capture configuration is beyond the scope of this exercise, check the LAC source code for details.

= TRIGGER  from PIN STATE TRANSITION =

We can change the default so a pin state transition causes the sampling to trigger.

Lets make the sampling trigger when we touch button pad 4.



- End 20130321 -