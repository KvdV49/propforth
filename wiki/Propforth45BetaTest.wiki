#summary The Beta version of Proforth 4.5 is undergoing regression test 20110528
#labels Propforth4.5,regression,test

= Introduction =

Before release each version of PropForth undergoes regression test to ensure that no functions have changed in an unexpected way.

All new functions undergo development testing; when a development test is passed, it is added to the regression suite. 

Before release, the regression suite is re-executed by multiple parties (as possible) to ensure everything behaves as we predict. 

In the case that the Beta passes all the regression tests and no changes are made, the Beta is "released" and made available to users.

= The Regression Tests =

Each individual function and behavior in propforth needs to be tested. This is accomplished by executing each function.  Each function can have multiple inputs, and unique boundary cases, etc.  The number of possible tests quickly grows out of control due to combinatorial explosion. 

To control this, Sal has come up with a simple scheme that addresses most issues.  It turns out that nearly all function of the propforth kernel are used in regenerating the propforth kernel.  Therefore, if a version of propforth can regenerate its own source code, and it is identical to the starting source code, we can assume that any bugs or errors that may be present do not affect the final result. 

Any function NOT invoked in the regeneration of the propforth kernel are tested separately as possible.

= The Regression Suite =

The Regression Suite can be divided into two catagories:
# the Kernel Regeneration process
# all other functions

= The Propforth Kernel choices - Boot Kernel and Development Kernel =

There are two primary configuration of the propforh kerenl at this time
# the boot kernel, no development functions, just enough to boot propforth
# the development kernel, everything needed in the dev environment

The BOOT kernel is the minimum to have a running propforth, a standalone, embedded application would be added to this and have the maximum memory space available to the application.

The development Kernel is the standard development environment.  This is used to create application.  

Standalone embedded applications can be built on either kernel.  It is left to the user to decide if more memory space or inclusion of development functions is desirable.   The recommendation is use the development kernel until the application indicated using the boot kernel, I.E. the prop runs out of memory, etc.

= The Propforth Kernel Regeneration Process =

Load PropForthBootKernel.spin; add PropForthKernel.f; do saveforth.  (This is equivalent to loading PropForthKernel.spin, but PropForthKernel.spin is not updated).

Yhr command 
[code] reboot [/code] 

[code] 
CON:Prop0 Cog0 RESET - last status: 0 ok

CON:Prop0 Cog1 RESET - last status: 0 ok

CON:Prop0 Cog2 RESET - last status: 0 ok

CON:Prop0 Cog3 RESET - last status: 0 ok

CON:Prop0 Cog4 RESET - last status: 0 ok

CON:Prop0 PROP REBOOT PropForth v4.4 2011MAY27 13:00 1

CON:Prop0 Cog5 RESET - last status: 0 ok

CON:Prop0 Cog6 RESET - last status: 0 ok

Prop0 Cog6 RESET - last status: 0 ok
Prop0 Cog6 ok
[/code] 

[code]  free [/code] 
[code] 
16330 bytes free - 161 cog longs free
Prop0 Cog6 ok
[/code] 




Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages