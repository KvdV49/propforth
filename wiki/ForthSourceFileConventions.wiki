#summary A stab at conventions for forth source code files

= A Method to Keep Organized =

Source code can quickly get out of control.

Here are some guidelines for keeping control of forth source code


{{{

EXAMPLE20101128-1750.zip
  
  contains files:
           01-ExampleFunctionPart1v2.3-201011228-1745.f
           02-ExampleFunctionPart2v2.3-201011228-1747.f
 
 after loading, execute
       Run_initializations
       Clear_counters
       Run_garbage_collection
       Run_processing
       Run_garbage_collection
       Save_Results
}}}

= What we need to know =

For a given set of source code definitions

We need to keep track of:

 # the version of the source
 # What the code does
 # What order to load the source definitions
 # What order to execute the definitions

== the version of the source ==

Tag the version using an arbitrary sequence number, and a date time stamp.

 {{{MyFunction-2.2-20101128-1709.f}}}

 Would be Forth source code file ({{{*.f}}} )

 For a function called {{{MyFunction}}} (as assigned by the author)

 version 2.2 (arbitrarily assigned by the author, where the previous version was 2.1 or lower)

 Date-time 2010 year 11 month (November) 28 day - 17 (5 PM) 09 minutes after the hour.  If you have a case where you need seconds, go ahead, but that usually is too much resolution. 
 

== What the code does ==

The name of the function should be descriptive enough to convey what the code is intended to accomplish 

names prefixed with an underscore designate a function used internally by the kernel; these can have side affects that may not be obvious.  These words should not be called from other location aside from those intended by the author.

== entry / exit criterion ==

all code must include clear documentation for entry and exit criterion.

We need to know:

 what circumstances must be present before the code is called.  

 What circumstances will be left after the word is finish executiong

 === STACK NOTES ===

    - all words MUST define what they expect on the stack in order to function.  

    - all words MUST define what they leave  on the stack after they function.  

 === INITIALIZE VARIABLE ===

    In cases where variables are used, all variables must be identified.
    The set of Valid values for each variable must be identified
    The set of invalid values for each variable must be identified
    The state of the variable AFTER execution must be defined (i.e result, unchanged, etc)
  

== What order to load the source definitions ==

If the definition are present in a single file, it will be assumed that the definitions are to be loaded in the order presented. 

If multiple files are included, the order in which the files are to be loaded must be stated.  Typically, the files will be expected to be loaded in the order presented in the directory listing,  fo  numbers are PRE-PENDED to the files names as in:

 {{{01-LoadMeFirst.f}}}

 {{{02-ThisOneIsNext.f}}}

 {{{03-ThisIsLoadedLast.f}}}

== What order to execute the definitions ==

Lastly, we need to know what order to execute the definitions

   {{{Run_initialisations}}}

   {{{Clear_counters}}}

   {{{Run_garbage_collection}}}

   {{{Run_processing}}}

   {{{Run_garbage_collection}}}

   {{{Save_Results}}}


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages