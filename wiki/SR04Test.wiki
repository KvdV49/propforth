#summary Testing the SR04 with New Knowledge.

= Introduction =

Initially, the LittleRobot BOM specificed a 220-330 ohm resistor.  This was incorrect.  The new information is at:

http://forums.parallax.com/showthread.php/148489-SR04-5-volt-to-3.3-volt

and

http://forums.parallax.com/showthread.php/148527-Input-clamping-diode-5v-to-3.3-volt-Max-and-Min-resistors


= SR04 output issue =

The SR04 output (echo pin) is at 5 volts. This is too high for the Prop, which uses 3.3 volts.  A directly connection would damage the prop input. 

= The CORRECT SOLUTION(s)=

== An in line, current limiting resistor ==

The app note (see below) state 4.6 k ohms MINIMUM. 

But I don't have any of those.  However I DO have a boat load of 10k resistors. Since 10k is above the minimum, these might work. Some applications could go up to the MEGAOHMS range, depending on the frequency.  Here, we just want square edges (not rounded) on our signal. 

*10K ohm resistor works, but there is another issue with the BATTERY VOLTAGE.*

== The textbook solution is a voltage divider.  ==

=== 1.7k and 3.3k ===

This worked but the resistors might need to be changed again 

  * Use a 1.7k ohm resistor at the echo pin from the SRO4
  * use a 3.3k ohm resistor at the Prop input (pin 17 in Spring 2013 session)
  * connect the OTHER side of the 1.7k and 3.3k ohm resistors TOGETHER,  attach THE JUNCTION to ground.
  
I haven;'t figured out how to attach a picture here, but is you google for "5volt to 3.3volt voltage divider", you should get and image with correct connections.

I tested this and the S04 began to functihttp://www.parallaxsemiconductor.com/an010on, even on units that I thought may have been damaged. 

THIS STILL MIGHT BE TOO LOW!! 1.2 mA is too much!!
It needs to be 500 uA!!!

So 0.0012 A is too high, we want 0.0005 Amps maximum! 


= From that Parallax App 10 Note = 

Parallax appnote (#10) "Low-cost Bidirectional Mixed-voltage Interfacing" - interfacing 5V signals to the Prop using a resistor.

http://www.parallaxsemiconductor.com/an010

A single resitor inline should do the trick.

They calculate 4.6k as the minimum resistor value for 5 volt signals.

Test 4.6 K !!!! edit - No 4.6 k in the bin! Make do with another value?

TEST 10K!!! edit - WORKS!

= The 4 AA Battery pack voltage issue =

This issue was hiding behind the SR04 5volt output to Prop 3.3volt input issue.  After we tried fixing the issue with a voltage divide AND inline current limiting resistor, there we still problems.  The SRR04 would "lock up"  after a bit, but not in all cases.  This was the clue. 

We check the voltages. The USB on my main computer puts out  about 4.8 volts, and 4.53 volts when the LittleRobot is connected and Teraterm is the terminal emulator. The changes checked out fine here. 

The USB on the second computer (an old Dell) is about 4.3 volts when the bot is running. This worked sometimes, but not others. 

The stand alone USB charger from an old cell phone 4.6 and 4.58 volts under load from the bot.  This worked fine.

So here the issue:   AA bateries are 1.5 volts.  Four AA batteris in the battery pack make 6.0 volts. New batteries are HIGHER, I measure 6.13 volts.  Turns out running the bot off the batteries was the case giving us problems.

So the REALLY problem was tha the SR04 was seriously OVER-VOLTED.   No wonder it was giving funky reading and locking up!  The quickstart has a regulator, that ensure it sees 3.3 volts whatever is coming in, the HC05/HC06 runs off the regulated 3.3 also, so they are both happy.  The steppers can run 5 to 12 volts, so like the honey badger they just don't care and eat it up. Only the SR04 is affected by the over voltage.

== Battery pack solutions == 

  #) use 4 NiMH - these cells also run 1.2 volts, four would be 4.8 volts, fixed!
  #) use 3 alkaline - these cell are 1.5 volts, four would be 4.5 volts, fixed!

If you are going to use the bot for an extended time, use the NiMH. They are cheaper for multiple use as they can be recharged, and hold a charge better.   

If you are goin to use the bot for testing and experiments, use 3 alkalines. They are cheaper for single use. Use a 1-3/4 bolt in place of the four cell. I found a 1/4 by 1-2/4 machine bolt in the bin, it worked fine. 

== use a proper power regulator ==

Consider a proper power regulation circuit.  Duane and Erco recommended these found these on Ebay, they are only $1.75 at this writing. However, they are not standard in the third batch of kits.   Maybe if interest picks up and we get a volume buy.....


http://www.ebay.com/itm/1pcs-DC-DC-Buck-Converter-Step-Down-Module-LM2596-Power-Supply-Output-1-23V-30V-/251066005460?ssPageName=ADME:L:OC:US:3160

Using these or similar, one could have a battery pack up to 30 volts, and still get the correct 5 volts for the devices, which could also be use to feed the regulator for the 3.3 volt devices. 

This is the recommended solution for those that wish to continue with the project.


= checking for damage =

At least 4 of the ten Ancona Bots from Spring 2013 had the incorrect resistor. Here is how we check the imputs

{{{
How can we test if the protection diode is damaged?
Apply 5V through a 3.3K resistor and measure the voltage on the pin. It should be around 3.9V if the diode is intact and functioning properly. 
}}}

= TEST CODE =

== sr04_display ==

This test code includes using the Quickstart LEDs to display the current range measurement.  Looks nifty!

{{{

fswrite ANSI.f

: esc h_1B emit ;
: csi esc h_5B emit ;
: m ." m" ;    
: smallf ." f" ; 
: K ." K" ;
: semicolon ." ;" ;

\ v>c convert a value ( 0-9 ) for a digit character for emit 
: v>c h_30 + emit ;
\ .digits ( n -  ." emit as DECIMAL characters" ) for AT  convert 0-99 for emit
: .digits 
          dup h_9 > if h_0A u/mod v>c then \ greater than 9 mod decimal 10
          v>c ;
\ AT  ( x y - ) put cursor at x,y
: AT csi .digits semicolon .digits smallf ;

: home       csi ." 1;1f" ;
: clear      csi ." 2J" ; 
: preclear   csi ." 1J" ;
: postclear  csi ." 0J" ;
: cls home clear  ;


...


fswrite sr04-testbed.f

1 wconstant build_sr04
[ifndef _sr04_trig
\ 16 wconstant _sr04_trig
 15 wconstant _sr04_trig
]
[ifndef _sr04_echo
\ 17 wconstant _sr04_echo
 16 wconstant _sr04_echo
]

variable _sr04_distance


: _sr04_measure
c" MEASURE" cds W!
4 state andnC!

_sr04_trig pinlo _sr04_trig pinout
_sr04_echo >m
_sr04_trig >m
begin
      dup _maskouthi dup dup dup dup drop drop drop _maskoutlo
      over dup dup dup
      waitpeq
      cnt COG@
      rot2

      waitpne
      cnt COG@ swap -
      d_170_000 clkfreq */

      _sr04_distance L!
      d_60 delms
0 until
;

: sr04_test
cls
	begin
               1 5 AT st? ."                  "
		_sr04_distance L@ . ."              "
		fkey? nip
    80 delms
	until
;

: sr04_display
c" LED" cds W!
4 state andnC!

  7 0 do i 17 + pinout  loop

	begin
		_sr04_distance L@ 
\ 16 is sr04 echo 
    dup 50 125 between if 17 pinhi else 17 pinlo then 
    dup 125 250 between if 18 pinhi else 18 pinlo then 
    dup 250 500 between if 19 pinhi else 19 pinlo then 
    dup 500 1000 between if 20 pinhi else 20 pinlo then 
    dup 1000 2000 between if 21 pinhi else 21 pinlo then 
    dup 2000 4000 between if 22 pinhi else 22 pinlo then 
     4000 >  if 23 pinhi else 23 pinlo then 
    
		fkey? nip
\    80 delms
	until
;



...

fswrite boot.f

hA state orC! version W@ .cstr cr cr cr
: findEETOP
0
h100000 h8000
do
i t0 2 eereadpage
if
leave
else
i h7FFE + t0 3 eereadpage
if
leave
else
drop i h8000 +
then
then
h8000 +loop
;

c" boot.f - Finding top of eeprom, " .cstr findEETOP ' fstop 2+ alignl L! forget findEETOP c" Top of eeprom at: " .cstr fstop . cr
c" boot.f - Loading bot.f~h0D~h0D" .cstr hA state andnC!
cr cr cr 


c" boot.f - Loading ANSI.f~h0D~h0D" .cstr hA state andnC!
fsload  ANSI.f
c" boot.f - Loaded ANSI.f~h0D~h0D" .cstr hA state andnC!

cr cr
c" boot.f - Loading sr04-testbed.f~h0D~h0D" .cstr hA state andnC!
fsload  sr04-testbed.f
c" boot.f - Loaded sr04-testbed.f~h0D~h0D" .cstr hA state andnC!

cr cr
c" boot.f - DONE PropForth Loaded~h0D~h0D" .cstr hA state andnC!

: onreset6
fkey? and fkey? and or h1B <>
if
\ c" 23 dup pinout pinhi" 1 cogx
\ cogid >con
c" _sr04_measure" 2 cogx
c" sr04_display" 3 cogx


then

cog? 

c" onreset6" (forget)
sr04_test
;

...

st?

cr


}}}

== sr04 bot 2 ==

this works in the bot with 1.8 and 3.3k.  This shows the voltage divider works, but does not address the 4 AA battery pack voltage issue.

{{{
\ fsread sr04.f

1 wconstant build_sr04
[ifndef _sr04_trig
16 wconstant _sr04_trig
]
[ifndef _sr04_echo
17 wconstant _sr04_echo
]

variable _sr04_distance


: _sr04_measure
c" MEASURE" cds W!
4 state andnC!

_sr04_trig pinlo _sr04_trig pinout
_sr04_echo >m
_sr04_trig >m
begin
dup _maskouthi dup dup dup dup drop drop drop _maskoutlo

over dup dup dup

waitpeq
cnt COG@
rot2

waitpne
cnt COG@ swap -
d_170_000 clkfreq */


_sr04_distance L!
d_200 delms
0 until
;

\ BOT 2 Cog6 ok


}}}



== SR04 without autoboot ==

This worked with the 1.8k and 3.3k voltage divider, on batteries, on the bots

{{{
fl

\ ascii code for red text      " ESC[31m "
\ hex character codes            1b 5b 33 31 6d
\ forth code for ascii red text v4.0: 1b emit 5b emit 33 emit 31 emit 6d emit          
\ forth code for ascii red text v5.0: h_1B emit h_5B emit h_33 emit h_31 emit h_6D emit          

\ ascii escape sequence start with ESC

\ second char of two character is 64 to 95   (@ to _)  40h to 5Fh
\ multi char are esc + [ + (@ to ~) 64 to 126  40h to  7Eh
\ next is [   5Bh
\ m is for graphics mode colors attributes
{ : to57 csi ." 5;7f" ;  : to2010 csi ." 20;10f" ; }
\ f is for position, needs character not value           

: esc h_1B emit ;
: csi esc h_5B emit ;
: m ." m" ;    
: smallf ." f" ; 
: K ." K" ;
: semicolon ." ;" ;

\ v>c convert a value ( 0-9 ) for a digit character for emit 
: v>c h_30 + emit ;
\ .digits ( n -  ." emit as DECIMAL characters" ) for AT  convert 0-99 for emit
: .digits 
          dup h_9 > if h_0A u/mod v>c then \ greater than 9 mod decimal 10
          v>c ;
\ AT  ( x y - ) put cursor at x,y
: AT csi .digits semicolon .digits smallf ;

: home       csi ." 1;1f" ;
: clear      csi ." 2J" ; 
: preclear   csi ." 1J" ;
: postclear  csi ." 0J" ;
: cls home clear  ;

\  sr04

1 wconstant build_sr04
[ifndef _sr04_trig
\	d_22 wconstant _sr04_trig
	d_16 wconstant _sr04_trig
]
[ifndef _sr04_echo
\	d_17 wconstant _sr04_echo
	d_23 wconstant _sr04_echo
]

variable _sr04_distance

: _sr04_measure
	c" MEASURE" cds W!
	4 state andnC!

	_sr04_trig pinlo _sr04_trig pinout
	_sr04_echo >m     \ 32 bit mask for echo pin is 65536
	_sr04_trig >m     \ 32 bit mask for trigger pin is 131_072
	begin
		dup _maskouthi dup dup drop _maskoutlo \ trigger hi, delay 30 cycles, trigger lo
		over dup dup dup \ echo on top, 3 copies, 4 total
		waitpeq \ wait till echo goes hi 
		cnt COG@ \ get count reg rollover will give bad value
		rot2     \    two more echo on top
		waitpne \ wait till echo goes low
		cnt COG@ swap -  \ delta of cnt
		d_170_000 clkfreq */   \ delta 340ms/2 80mhz 
                           \  ( n1 n2 n3 -- n4 ) n4 = (n1*n2)/n3.
                           \  so its cnt nicroseconds divided by 361.25 
                          \ ( integer with 64 bit intermediate result))
                          \ give mm
		_sr04_distance   L!
		
\		1000 delms
			60 delms

	0 until
;

\  [ifdef sr04_test

: sr04_test
	begin
		_sr04_distance L@ . ."     "
		fkey? nip
	until
;

\  clear screen 
\  pre stack at  C=5 Row= 6
\  distance at C= 7  Row = 8
\ post stack at C=5 = row =10

: sr_loop 	
          begin
               3 4 AT cnt COG@ dup . st? drop
               7 8 AT
      		     _sr04_distance L@ . ."     "      		     
		           fkey? nip
		           10 delms
	until
; 

: sr cls 
        5 6 AT  st? 
        sr_loop
        5 10 AT st?      
;

\   ]

: sr-init
           c" _sr04_measure" 0 cogx
;
c" _sr04_measure" 0 cogx

sr

}}}


== SR04test.f ==

This should work, but did not work on the SR04 test bed

{{{

fl

fswrite boot.f

hA state orC! version W@ .cstr cr cr cr
: findEETOP
0
h100000 h8000
do
i t0 2 eereadpage
if
leave
else
i h7FFE + t0 3 eereadpage
if
leave
else
drop i h8000 +
then
then
h8000 +loop
;

c" boot.f - Finding top of eeprom, " .cstr findEETOP ' fstop 2+ alignl L! forget findEETOP c" Top of eeprom at: " .cstr fstop . cr
c" boot.f - Loading bot.f~h0D~h0D" .cstr hA state andnC!
fsload sr04test.f
c" boot.f - Loaded sr04test.f~h0D~h0D" .cstr hA state andnC!
c" boot.f - DONE PropForth Loaded~h0D~h0D" .cstr hA state andnC!

fsls

...

\ ------------------------------------------------------------

fswrite sr04test.f

1 wconstant build_sr04
[ifndef _sr04_trig
16 wconstant _sr04_trig
]
[ifndef _sr04_echo
17 wconstant _sr04_echo
]

variable _sr04_distance


: _sr04_measure
c" MEASURE" cds W!
4 state andnC!

_sr04_trig pinlo _sr04_trig pinout
_sr04_echo >m
_sr04_trig >m
begin

     dup _maskouthi dup dup drop _maskoutlo
     over dup dup dup
     cnt COG@
     rot2

     waitpne
     cnt COG@ swap -
     d_170_000 clkfreq */

     _sr04_distance L!
     d_60 delms
     \ d_200 delms
0 until
;

\ braino debug 20130610

: esc h_1B emit ;
: csi esc h_5B emit ;
: m ." m" ;    
: smallf ." f" ; 
: K ." K" ;
: semicolon ." ;" ;

\ v>c convert a value ( 0-9 ) for a digit character for emit 
: v>c h_30 + emit ;
\ .digits ( n -  ." emit as DECIMAL characters" ) for AT  convert 0-99 for emit
: .digits 
          dup h_9 > if h_0A u/mod v>c then \ greater than 9 mod decimal 10
          v>c ;
\ AT  ( x y - ) put cursor at x,y
: AT csi .digits semicolon .digits smallf ;

: home       csi ." 1;1f" ;
: clear      csi ." 2J" ; 
: preclear   csi ." 1J" ;
: postclear  csi ." 0J" ;
: cls home clear  ;

: dd _sr04_distance L@ . ; 

:  sr04 cls ." sr04 test " 

0 10 AT ." SR04 mm= ...." 

 begin 10 10 AT dd ."    " 100 delms fkey? swap drop until ; 

: Message cr cr ."  Type sr04 dd or d to start the test, esc to exit " cr cr ;


\ braino debug 20130610


: onreset6
cr ." INITALIZING SR04 sensor (cogs 2) in 2 second...." cr 2000 delms

fkey? and fkey? and or h1B <>
if
\ c" init_motorA" 0 cogx
\ c" init_motorB" 1 cogx
c" _sr04_measure" 2 cogx
 ."  motors and sensors initialized ... " cr cr
cog? 
then

Message 

cr ." RESETING on cog6 now ....  "  cr  

c" onreset6" (forget)

;

...


\ --- gratuitous comment, so there's a new line after the ... when pasting from web page

}}}


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages