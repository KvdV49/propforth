#summary User Guide for the Little Robot™
#labels v5.3,LittleRobot

<wiki:toc max_depth="9" />

= Introduction =

The User Guide is also the functional specification for the software.  The User Guide is written first, and the firmware is written to comply with the functional description.  Both components, the User Guide and the firmware, will influence each other during development.  

I'm writing this for my daughter's elementary school class, so I'm assuming I have to define all the terms in detail.  Please don't find this patronizing. 

= Description =

The LittleRobot™ Project is designed to demo the capabilities of micro controller software/firmware. The target microcontroller considered here is the Parallax Propeller P8X32A.  Other devices may also be used, at the user's discretion.

Previous details start here, you have to drill down.

http://code.google.com/p/propforth/wiki/LittleRobot

= Baseline Hardware =

The LittleRobot™ consists of:
 * two stepper motors per the LittleRobotBOM
 * one utlrasonic ranfgfinder module per the LittleRobotBOM
 * one bluetooth module per the LittleRobotBOM
 * any standard Propeller board or equivalent

Besides the user supplied microcontroller, other user supplied hardware will be needed. Anything you want to use is OK, harvested parts are fine.  These include:

 * wheels 
 * battery holder
 * a chassis (can be 3D printed, carved from wood, etc)
 * various wires
 * various screws and small parts 

The fun is building the mechanical parts of the bot from nothing.  You may be surprised how easy it is! 
-----
Note: I'm adding this section at the top for easier editing, it should probably be moved later.

= Little Robot Commands =

These are the commands that we plan to code for the little robot as part of the demo.  Not all the command will be implemented, just enough of the low level functions to build the high level functions

== senor commands ==

 * @distance \  trigger an ultrasonic sensor measurement sequence;  this returns the distance measure
 * MaxDistance - this is the maximum distance the bot can detect
 * MinDistance - this is the minimum distance the bot "wants" between it and any object, ideally so it does not crash into an object while manuvering

== Motor Commands ==

 * motorA\B \  to designate a motor as motor A or motor B
 * motorLeftRight designate motor A as Left and B as right, or the opposite

 * motor-cw \ command motor to rotate clockwise
 * motor-ccw \ command motor to rotate counterclockwise
 * motor-halfstep \ set motor to halfstep mode
 * motor-fullstep \ set motor to fullstep mode
 * MotorSpeed \  set the motor to a particular speed (steps per second?)
 * Forward \ set one motor CW and other CCW to go forward
 * Reverse \ opposite of forward
 * pivotRight \ pivot in place 0-360 degrees
 * pivotLeft \ pivot in place 0-360 degrees
 * scanRight \ pivot in place 0-360 degrees and return to original heading
 * scanLeft \ pivot in place 0-360 degrees and return to original heading

 * arcLeft \ For a point N cm to the left of the bot, move D degrees of arc
 * arcRight \ For a point N cm to the right of the bot, move D degrees of arc
  
== Complex Functions == 

 * orientation \ return the bot orientation relative to power-up, based on wheel rotation.  This assumes the wheels did not skid, nor that the bot was moved in any way aside from its wheels rotating on a reasonable surface.

 * DeltaX \  overall X delta from power up location based on wheel rotation
 * DeltaY \  overall X delta from power up location based on wheel rotation

 * sentry \ travel environment in wall-follow mode unitl it returns to starting position. then turn around and go the other ways, repeat.

 * Explore \ log distance reading for the local environment.  Determine a closest area that does not have readings (mapping data coverage), travel to that are and establish reading, repeat. 

== outputs ==

There will be three types of output from the bot. Not all outputs will be present at all times for all functions.
 # text output \ a test status display of the result of the previous or current command
 # motion output \  the bot will move its wheels in response to particular commands.
 # control line output \ the bot will raise hi or hold low control lines as a result of the previous or current command.  These control lines could be connecter to LEDs in the case of the quickstart and other propboards.  These could also be connected to beepers or other transducers, according to user preference. 

-----

= Functions =

The LittleRobot™ only has three subsystems, and these only have a few 
simple functions.  You can do these in any order.

== Ultrasonics Range finder ==

The ultrasonic range finder distance measurement unit only needs two functions:
  # trigger a measurement pulse sequence 
  # Report the measurement

See the extension for the ultrasonic rangefinder driver in the extensions directory /misc of the v5.3 download archive.

{{{
SR04.f
}}}

== Stepper Motors == 

The stepper motor has only a few simple functions. These are:

 # Stop
 # Rotate Clockwise (CW)
 # Rotate Counterclockwise (CCW)
 # Rotate Slow (Half steps)
 # Rotate FAST (Full steps)
 # Acceleration (how quickly the stepper reaches it maximum speed)

The rotation can further  be controlled by adjusting the acceleration and rate.

See the extension for the stepper motor driver in the extensions directory /misc of the v5.3 download archive.

{{{
4step.f
}}}

== Bluetooth Cable Replacement ==

The Bluetooth module allow communication with the propforth command line wirelessly, using any bluetooth capable device, and a suitable terminal program.

Remember, the propforth.SPIN file must be adjusted so communication occurs on the Bluetooth pins 26 & 27 instead of the default RS232 pins 30 and 31.

The Bluetooth module only has one function, tha it "Communicate".  When the bluetooth is installed, configured, and mated with your bluetooth master device, and your bluetooth master device is running a suitable terminal program, communications is established.  The propforth command line is available just as if it we hardwired to the PC running teraterm. 

See the extension for the Bluetooth Cable replacement in the extensions directory /misc of the v5.3 download archive.

{{{
BluetoothHC05-06.f
}}}

== OPTIONAL: LEDs ==

The Propeller Quickstart has 8 LEDs on pins 16-23.  These can be used as indicators and for diagnostics. LEDs in this same configuration can be added to any standard propeller oboard.  The LEDs can be driven using the Quickstart touchpad demo example.

The LEDS have two functions:

 # LED on
 # LED off

for all 8 LEDs

See the extension for the Prop Quickstart in the downloads section of this wiki. 

http://code.google.com/p/propforth/downloads/detail?name=QuickstartTouchDemo20120611-1540.txt

{{{
QuickstartTouchDemo20120611-1540.txt
}}}



== OPTIONAL: Touch Pad buttons ==

The Propeller Quickstart has 8 resistive touch pad buttons on pins 0-7.  These can be used as indicators and for diagnostics. Resistive touch pad buttons  in this same configuration can be added to any standard propeller oboard.  The Resistive touch pad buttons  can be driven using the Quickstart touchpad demo example.

The touch button report one of two values for the button state:

 # touched
 # not touched

Remember, the touch pads are scanned MANY times a second.  When use with the LEDs, the LEDS are very quickly set ON as soon as the button is touched, and OFF as soon as the button is not touched.

If you try to light an LED, but it does not light, consider that the touch button driver may be setting the LED back to the OFF value faster than the LED can turn on!

See the extension for the Prop Quickstart in the downloads section of this wiki. 

http://code.google.com/p/propforth/downloads/detail?name=QuickstartTouchDemo20120611-1540.txt

{{{
QuickstartTouchDemo20120611-1540.txt
}}}

-----


= Pre-Construction: Test the Electronics =

Be sure to test the components before assembleing the bot. 

After assembly, test to compenents again to ensure nothing got confused.


= Assembling the LittleRobot™(tm) =

This is the fun part. As you see from the picture, the Little Robot is just some wheels stuck on some motors, and the motors are stuck on some crude chassis. I took a roughly square chunk of 2x4 scrap wood (pine) and squared it up, and cut motor sized notches in the sides. Sal wanted to use his new 3D pinter, so he designed a chassis, drew it up in OpenSCAD, and printted it. 

(include files here).

== chassis ==

You can make any chassis you want, as long as the motor shafts end up more or less opposite each other, and facing apart.  The critical aspect is that the shafts line on the same line.  But its not TOO critical. 


Try a design. Build it.  Watch it fall apart. (FUN!) Build it again, a little bit better.  Do this a few times, and you will have a suit able chassis, and you will have learned the most important aspect of engineering, which is YOU are the engineer. 

== wheels ==

Wheels are little trickier. Just as the critical aspect of the chassis is getting the shafts to line up, the critical aspect of the wheels is getting the shafts in the center. The better they are centered, the smoother the robot will roll.  But, if they are not centered perfectly, the robot will simply "waddle" a little bit, no biggie. 

== Battery case ==

I get my battery cases from surplus, they are right down the rod from me. But you can use anything handy, a mailing box with paper clip contacts, duct tape, cable ties, etc.  AS long as the batteries don't fall out too often, you should be fine. 

== Tips ==

Put Blue painters tape on you work so you can do layout of the lines and where the holes go.  If you make a mistake, you can take off the tape, and start over. When its time to drill or saw, you can cut right through the tape. 

Measure everything first.  I try to measure to the thickness of my pen or pencil.  I ussually can get things pretty close. 

Pre-drill the holes.  Its a LOT easier to to screw in the screws when there's already a hole there. 

GET HELP FROM SOMEBODY if you haven't done this before, these are useful skills and good habits to establish. 

-----

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages