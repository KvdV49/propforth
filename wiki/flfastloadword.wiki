#summary fl is the FAST-LOAD word
#labels v3.2,Deprecated

<wiki:toc max_depth="9" />

This page has been replaced by

http://code.google.com/p/propforth/wiki/flfastload


= Method to load FORTH source to Propforth =

FORTH source code can be added interactively to PropForth by typing at the user terminal.  Colon definitions for new words extend the forth dictionary.

{{{
: MyWord ." This is my new word MyWord in the dictionary" ;
}}}

The system is restarted between variations of each word, as any failed definition or incorrect execution can potentially corrupt the system.  (This is the case in any development environment, in FORTH we type reboot or hit the reset button.  In other environments such as SPIN, the processor is reloaded and this re-initializes everything.) 

After a definition is complete, it is useful to save the definition in a text file. Rather than re-type each definition at the command line, it is handy to simple paste the contents of the text file into the PropForth terminal window.  This allows completed definitions and new experimental definitions to be enters in a simple operation. 

 # open forth source code text file using your favorite editor on the PC
 # highlite the desired text (control - A does this for the whole file)
 # paste the highlighted text into the teraterm window

= Limit to directly entering text in TeraTerm window with simple 'paste' =

WHEN THE TEXT EXCEEDS A CERTAIN NUMBER OF LINES/CHARACTERS, ERRORS OCCUR DUE TO BUFFER OVERRUN.

Definitions that loaded properly when typed individually begin to display syntax errors when entered in a large enough group.  Also, if you can type REALLY fast, it is conceivable the definitions could be typed correctly but faster then propforth can accept them (this has not been observed as of this writing). 

This is due to the size of the input buffer, the baud rate, and the time it takes to compile the definition into the dictionary when the semi colon ; is encountered,  and the way comments are handled. 

= Entering very Large amounts of text in a single operation with fl =

The 'fl' stands for FAST-LOAD according to the author Sal Sanci, but in various places I have incorrectly indicated fl means file-load.  Sorry if this causes a problem, flag any instances and I will correct them. 


The *fl* command is used to enter large chinks of text in a single operation. The operation is nearly identical to the simple copy and paste, the difference being that the fl word is executed as part of the text input process:

 # open forth source code text file using your favorite editor on the PC
 # ensure that the fl command is at the begining of the text to be pasted
 # highlite the desired text (control - A does this for the whole file)
 # paste the highlighted text into the teraterm window

= What you see =

When the highlighted text is pasted into the teraterm window, the fl word is encountered in the input stream and begins execution. The display sit at the fl word while it executes. The Blue LED on the Prop Demo Board flashes as the text stream is sent to the prop. After the transmission is complete, the Propforth echos the text stream to TeraTerm as each word is interpreted. The RED LED flashes as each character is echoed. If na errp is encountered in the text stream, the error message is displayed if possible and execution terminates, just as done with manually type definitions. 

= what happens =

When the highlighted text is pasted into the teraterm window, the fl word  begins execution when it is encountered by the interpreter.  The fl word takes the input stream and buffers the text into unused RAM. This is the process when the first LED is flashing. After the text has been buffered to RAM, fl gives the buffered text to the interpreter.  The interpreter processes the text, execution words and creating definitions just as it would if the text were typed manually.  The text is echoed to the tera terminal screen, and this is what causes the other LED to flash. 

As the text is processed, the ram used as buffer is released back to "unused ram". 

= errors =

If an error is encountered, the pointers are not guaranteed to be correct. (Makes sense, there was an error, something is not right, very likely this will affect execution). 

The user is advised to reset the system (hit the reset button or type reboot), fix the code and try again.  

NOTICE:  Sometimes folks that are not used to forth do not reset after error, and try to continue working.  One advantage of forth is the shorter development iteration. Other environments, such as SPIN, reset the system when the SPIN TOOL sends an image to the prop. The equivalent is reloading Propforth.spin every time you make an edit.  You can do this, but then the development iteration gets just as long as in Spin, etc.  To use this advantage of forth, simply reset the prop between errors.  See the SAVEFORTH word for how to save all you working definition, so when you hit reset, you don't have to load your whole development from scratch.

= Limits to fl command =

== max characters ==

The maximum number of character that the fl word can accept is determined by the available ram which is dependent on the size of the forth dictionary.  The basic kernel can accept the number of characters in PropforthPart1.f  

Sal re-adjusts the size of propforthpart1.f for each release by moving some definitions to propforthpart2.f, since the dictioary tends to grow with each release. 

Last time I counted is was around 26000 character.

For text larger than this, break the text into multiple chunks, and enter each in sequence. 

== The ALLOT word ==

The fl word uses RAM starting at 128 bytes past the end of the dictionary.  This means if something is defined greater than about 100 bytes (due to overhead, etc) the dictionary will overwrite the RAM that fl is using as its buffer. This will likely cause a failure or error.  

There are two suggestions from Sal how to work with this:

1. From the ethernet driver (which is not posted as of v3.4 but should be out in v3.6)

{{{
lockdict wvariable myarray 10 allot freedict
}}}

The lockdict and freedict keep the code contiguous.  (I have not tried this, place provide feedback with your results)

2. don't allocate at the beginning, at the end use a word to allocate the buffers.
Example to follow - sorry I didn't get the example code yet

Since the issue is with trying to allocte within the fl word, consider arranging the code so the ALLOT is performed in a separate step, and the rest of the code is loaded with the fl word as a separate step. 

= END of fl word instructions 20100912 =